import sys
from colorama import init, Fore, Back, Style
init()

# Code gen from https://github.com/envytools/envytools/blob/master/envydis/gm107.c

OP8B = "OP8B"
REG_00 = "REG_00"
REG_08 = "REG_08"
REG_20 = "REG_20"
S20_20 = "S20_20"
U03_26 = "U03_26"
U06_20 = "U06_20"
U06_00 = "U06_00"
SYS_20 = "SYS_20"
U04_28 = "U04_28"
U08_08 = "U08_08"
AMEM = "AMEM"
REG_39 = "REG_39"
PRED45 = "PRED45"
PLDMEM = "PLDMEM"
ISBERDMEM = "ISBERDMEM"
PRED44 = "PRED44"
S11_20 = "S11_20"
C36_08_S16_20 = "C36_08_S16_20"
CCTLLMEM = "CCTLLMEM"
CCTLMEM = "CCTLMEM"
SMEM = "SMEM"
LMEM = "LMEM"
PRED48 = "PRED48"
ATOMMEM0 = "ATOMMEM0"
NCGMEM = "NCGMEM"
U08_20 = "U08_20"
ATOMMEM1 = "ATOMMEM1"
REDMEM0 = "REDMEM0"
C34_RZ_O14_20 = "C34_RZ_O14_20"
SUREDMEM = "SUREDMEM"
U36_13 = "U36_13"
U20_20 = "U20_20"
U16_20 = "U16_20"
C36_RZ_S16_20 = "C36_RZ_S16_20"
BTARG = "BTARG"
S24_20 = "S24_20"
U32_20 = "U32_20"
S32_20 = "S32_20"
AMEM28 = "AMEM28"
AMEMIDX = "AMEMIDX"
U04_31 = "U04_31"
U13_36 = "U13_36"
REG_28 = "REG_28"
GMEM = "GMEM"
PRED58 = "PRED58"
PRED03 = "PRED03"
PRED00 = "PRED00"
PRED39 = "PRED39"
U09_30 = "U09_30"
U09_20 = "U09_20"
U04_39 = "U04_39"
U05_39 = "U05_39"
U08_28 = "U08_28"
U05_28 = "U05_28"
U24_20 = "U24_20"
U08_48 = "U08_48"
F20_20 = "F20_20"
D20_20 = "D20_20"
U16_36 = "U16_36"
F32_20 = "F32_20"
U05_51 = "U05_51"
U05_53 = "U05_53"
U04_12 = "U04_12"
OOPS = "OOPS"
U05_20 = "U05_20"
U13_34 = "U13_34"
S16_20 = "S16_20"
U12_20 = "U12_20"

def N(x):
    return x

def T(x):
    return '$T_' + x

T_LookupTable = {
	'pred12': [
		[0x7, (0x7 << 12) | (1 << 15)]
	],
	'pred29': [
		[0x7, (0x7 << 29) | (1 << 32)]
	],
	'pred39': [
		[0x7, (0x7 << 39) | (1 << 42)]
	],
	'pred47': [
		[0x7, (0x7 << 47) | (1 << 50)]
	],
	'pred': [
		[0x0000000000070000, 0x00000000000f0000 ],
		[0x00000000000f0000, 0x00000000000f0000, N("never") ],
	],
	'fbe0_0': [
		[0x0000008000000000, 0x0000018000000000, N("emit") ],
		[0x0000010000000000, 0x0000018000000000, N("cut") ],
		[0x0000018000000000, 0x0000018000000000, N("emit_then_cut") ],
	],
	'f0f8_0': [
		[0x0000000000000000, 0x000000000000001f, N("f") ],
		[0x0000000000000001, 0x000000000000001f, N("lt") ],
		[0x0000000000000002, 0x000000000000001f, N("eq") ],
		[0x0000000000000003, 0x000000000000001f, N("le") ],
		[0x0000000000000004, 0x000000000000001f, N("gt") ],
		[0x0000000000000005, 0x000000000000001f, N("ne") ],
		[0x0000000000000006, 0x000000000000001f, N("ge") ],
		[0x0000000000000007, 0x000000000000001f, N("num") ],
		[0x0000000000000008, 0x000000000000001f, N("nan") ],
		[0x0000000000000009, 0x000000000000001f, N("ltu") ],
		[0x000000000000000a, 0x000000000000001f, N("equ") ],
		[0x000000000000000b, 0x000000000000001f, N("leu") ],
		[0x000000000000000c, 0x000000000000001f, N("gtu") ],
		[0x000000000000000d, 0x000000000000001f, N("neu") ],
		[0x000000000000000e, 0x000000000000001f, N("geu") ],
		[0x000000000000000f, 0x000000000000001f ],
		[0x0000000000000010, 0x000000000000001f, N("off") ],
		[0x0000000000000011, 0x000000000000001f, N("lo") ],
		[0x0000000000000012, 0x000000000000001f, N("sff") ],
		[0x0000000000000013, 0x000000000000001f, N("ls") ],
		[0x0000000000000014, 0x000000000000001f, N("hi") ],
		[0x0000000000000015, 0x000000000000001f, N("sft") ],
		[0x0000000000000016, 0x000000000000001f, N("hs") ],
		[0x0000000000000017, 0x000000000000001f, N("oft") ],
		[0x0000000000000018, 0x000000000000001f, N("csm_ta") ],
		[0x0000000000000019, 0x000000000000001f, N("csm_tr") ],
		[0x000000000000001a, 0x000000000000001f, N("csm_mx") ],
		[0x000000000000001b, 0x000000000000001f, N("fcsm_ta") ],
		[0x000000000000001c, 0x000000000000001f, N("fcsm_tr") ],
		[0x000000000000001d, 0x000000000000001f, N("fcsm_mx") ],
		[0x000000000000001e, 0x000000000000001f, N("rle") ],
		[0x000000000000001f, 0x000000000000001f, N("rgt") ],
	],
	'f0f0_0': [
		[0x0000000000000000, 0x0000000020000000 ],
		[0x0000000020000000, 0x0000000020000000, N("le") ],
	],
	'f0c0_0': [
		[0x0000000000000000, 0x0000000300000000 ],
		[0x0000000100000000, 0x0000000300000000, N("result") ],
		[0x0000000200000000, 0x0000000300000000, N("warp") ],
	],
	'eff0_0': [
		[0x0000000000000000, 0x0001800000000000, N("b32") ],
		[0x0000800000000000, 0x0001800000000000, N("b64") ],
		[0x0001000000000000, 0x0001800000000000, N("b96") ],
		[0x0001800000000000, 0x0001800000000000, N("b128") ],
	],
	'efe8_0': [
		[0x0000000000000000, 0x0000000380000000 ],
		[0x0000000080000000, 0x0000000380000000, N("covmask") ],
		[0x0000000100000000, 0x0000000380000000, N("covered") ],
		[0x0000000180000000, 0x0000000380000000, N("offset") ],
		[0x0000000200000000, 0x0000000380000000, N("centroid_offset") ],
		[0x0000000280000000, 0x0000000380000000, N("my_index") ],
	],
	'efd0_0': [
		[0x0000000000000000, 0x0000000600000000 ],
		[0x0000000200000000, 0x0000000600000000, N("patch") ],
		[0x0000000400000000, 0x0000000600000000, N("prim") ],
		[0x0000000600000000, 0x0000000600000000, N("attr") ],
	],
	'efd0sz': [
		[0x0000000000000000, 0x0001800000000000 ],
		[0x0000800000000000, 0x0001800000000000, N("u16") ],
		[0x0001000000000000, 0x0001800000000000, N("b32") ],
	],
	'ef98_0': [
		[0x0000000000000000, 0x0000000000000300, N("cta") ],
		[0x0000000000000100, 0x0000000000000300, N("gl") ],
		[0x0000000000000200, 0x0000000000000300, N("sys") ],
		[0x0000000000000300, 0x0000000000000300, N("vc") ],
	],
	'ef98_1': [
		[0x0000000000000000, 0x0000000000000003 ],
		[0x0000000000000001, 0x0000000000000003, N("ivalld") ],
		[0x0000000000000002, 0x0000000000000003, N("ivallt") ],
		[0x0000000000000003, 0x0000000000000003, N("ivalltd") ],
	],
	'ef90_0': [
		[0x0000000000000000, 0x0000300000000000 ],
		[0x0000100000000000, 0x0000300000000000, N("il") ],
		[0x0000200000000000, 0x0000300000000000, N("is") ],
		[0x0000300000000000, 0x0000300000000000, N("isl") ],
	],
	'ef90sz': [
		[0x0000000000000000, 0x0007000000000000, N("u8") ],
		[0x0001000000000000, 0x0007000000000000, N("s8") ],
		[0x0002000000000000, 0x0007000000000000, N("u16") ],
		[0x0003000000000000, 0x0007000000000000, N("s16") ],
		[0x0004000000000000, 0x0007000000000000, N("b32") ],
		[0x0005000000000000, 0x0007000000000000, N("b64") ],
	],
	'ef80_0': [
		[0x000000000000ff06, 0x00000fffffc0ff0f, N("ivall") ],
		[0x0000000000000001, 0x000000000000000f, N("pf1") ],
		[0x0000000000000002, 0x000000000000000f, N("pf1.5") ],
		[0x0000000000000003, 0x000000000000000f, N("pf2") ],
		[0x0000000000000004, 0x000000000000000f, N("wb") ],
		[0x0000000000000005, 0x000000000000000f, N("iv") ],
		[0x0000000000000007, 0x000000000000000f, N("rs") ],
		[0x0000000000000008, 0x000000000000000f, N("what?") ],
		[0x0000000000000009, 0x000000000000000f, N("rslb") ],
	],
	'ef80ct': [
		[0x0000000000000000, 0x0000000000000070 ],
	],
	'ef60_0': [
		[0x000000000000ff06, 0x00000fffffc0ff0f, N("ivall") ],
		[0x0000000000000000, 0x000000000000000f, N("qry1") ],
		[0x0000000000000001, 0x000000000000000f, N("pf1") ],
		[0x0000000000000002, 0x000000000000000f, N("pf1.5") ],
		[0x0000000000000003, 0x000000000000000f, N("pf2") ],
		[0x0000000000000004, 0x000000000000000f, N("wb") ],
		[0x0000000000000005, 0x000000000000000f, N("iv") ],
		[0x0000000000000007, 0x000000000000000f, N("rs") ],
		[0x0000000000000008, 0x000000000000000f, N("what?") ],
		[0x0000000000000009, 0x000000000000000f, N("rslb") ],
	],
	'ef60ct': [
		[0x0000000000000000, 0x0000000000000070 ],
		[0x0000000000000010, 0x0000000000000070, N("u") ],
		[0x0000000000000020, 0x0000000000000070, N("c") ],
		[0x0000000000000030, 0x0000000000000070, N("i") ],
		[0x0000000000000040, 0x0000000000000070, N("crs") ],
	],
	'ef58sz': [
		[0x0000000000000000, 0x0007000000000000, N("u8") ],
		[0x0001000000000000, 0x0007000000000000, N("s8") ],
		[0x0002000000000000, 0x0007000000000000, N("u16") ],
		[0x0003000000000000, 0x0007000000000000, N("s16") ],
		[0x0004000000000000, 0x0007000000000000, N("b32") ],
		[0x0005000000000000, 0x0007000000000000, N("b64") ],
		[0x0006000000000000, 0x0007000000000000, N("b128") ],
	],
	'ef50_0': [
		[0x0000000000000000, 0x0000300000000000 ],
		[0x0000100000000000, 0x0000300000000000, N("cg") ],
		[0x0000200000000000, 0x0000300000000000, N("cs") ],
		[0x0000300000000000, 0x0000300000000000, N("wt") ],
	],
	'ef40_0': [
		[0x0000000000000000, 0x0000300000000000 ],
		[0x0000100000000000, 0x0000300000000000, N("lu") ],
		[0x0000200000000000, 0x0000300000000000, N("ci") ],
		[0x0000300000000000, 0x0000300000000000, N("cv") ],
	],
	'ef10_0': [
		[0x0000000000000000, 0x00000000c0000000, N("idx") ],
		[0x0000000040000000, 0x00000000c0000000, N("up") ],
		[0x0000000080000000, 0x00000000c0000000, N("down") ],
		[0x00000000c0000000, 0x00000000c0000000, N("bfly") ],
	],
	'ef10_1': [
		[0x00000000000000000, 0x0000000030000000, REG_20, REG_39 ],
		[0x00000000010000000, 0x0000000030000000, U05_20, REG_39 ],
		[0x00000000020000000, 0x0000000030000000, REG_20, U13_34 ],
		[0x00000000030000000, 0x0000000030000000, U05_20, U13_34 ],
	],
	'eed8_0': [
		[0x0000000000000000, 0x0000c00000000000 ],
		[0x0000400000000000, 0x0000c00000000000, N("cg") ],
		[0x0000800000000000, 0x0000c00000000000, N("cs") ],
		[0x0000c00000000000, 0x0000c00000000000, N("wt") ],
	],
	'eed0_0': [
		[0x0000000000000000, 0x0000c00000000000 ],
		[0x0000400000000000, 0x0000c00000000000, N("cg") ],
		[0x0000800000000000, 0x0000c00000000000, N("ci") ],
		[0x0000c00000000000, 0x0000c00000000000, N("cv") ],
	],
	'eed0sz': [
		[0x0000000000000000, 0x0007000000000000, N("u8") ],
		[0x0001000000000000, 0x0007000000000000, N("s8") ],
		[0x0002000000000000, 0x0007000000000000, N("u16") ],
		[0x0003000000000000, 0x0007000000000000, N("s16") ],
		[0x0004000000000000, 0x0007000000000000, N("b32") ],
		[0x0005000000000000, 0x0007000000000000, N("b64") ],
		[0x0006000000000000, 0x0007000000000000, N("b128") ],
		[0x0007000000000000, 0x0007000000000000, N("u"), N("b128") ],
	],
	'ee00_0': [
		[0x0000000000000000, 0x0060000000000000, N("cast") ],
		[0x0020000000000000, 0x0060000000000000, N("cast"), N("spin") ],
		[0x0040000000000000, 0x0060000000000000, N("cas") ],
	],
	'ee00sz': [
		[0x0000000000000000, 0x0010000000000000, N("b32") ],
		[0x0010000000000000, 0x0010000000000000, N("b64") ],
	],
	'eef0sz': [
		[0x0000000000000000, 0x0002000000000000, N("b32") ],
		[0x0002000000000000, 0x0002000000000000, N("b64") ],
	],
	'ed00_0': [
		[0x0000000000000000, 0x00f0000000000000, N("add") ],
		[0x0010000000000000, 0x00f0000000000000, N("min") ],
		[0x0020000000000000, 0x00f0000000000000, N("max") ],
		[0x0030000000000000, 0x00f0000000000000, N("inc") ],
		[0x0040000000000000, 0x00f0000000000000, N("dec") ],
		[0x0050000000000000, 0x00f0000000000000, N("and") ],
		[0x0060000000000000, 0x00f0000000000000, N("or") ],
		[0x0070000000000000, 0x00f0000000000000, N("xor") ],
		[0x0080000000000000, 0x00f0000000000000, N("exch") ],
		[0x00a0000000000000, 0x00f0000000000000, N("safeadd") ],
	],
	'ed00sz': [
		[0x0000000000000000, 0x000e000000000000, N("u32") ],
		[0x0002000000000000, 0x000e000000000000, N("s32") ],
		[0x0004000000000000, 0x000e000000000000, N("u64") ],
		[0x0006000000000000, 0x000e000000000000, N("ftz"), N("rn"), N("f32") ],
		[0x0008000000000000, 0x000e000000000000, N("u128") ],
		[0x000a000000000000, 0x000e000000000000, N("s64") ],
	],
	'ec00_0': [
		[0x0000000000000000, 0x00f0000000000000, N("add") ],
		[0x0010000000000000, 0x00f0000000000000, N("min") ],
		[0x0020000000000000, 0x00f0000000000000, N("max") ],
		[0x0030000000000000, 0x00f0000000000000, N("inc") ],
		[0x0040000000000000, 0x00f0000000000000, N("dec") ],
		[0x0050000000000000, 0x00f0000000000000, N("and") ],
		[0x0060000000000000, 0x00f0000000000000, N("or") ],
		[0x0070000000000000, 0x00f0000000000000, N("xor") ],
		[0x0080000000000000, 0x00f0000000000000, N("exch") ],
	],
	'ec00sz': [
		[0x0000000000000000, 0x0000000030000000, N("u32") ],
		[0x0000000010000000, 0x0000000030000000, N("s32") ],
		[0x0000000020000000, 0x0000000030000000, N("u64") ],
		[0x0000000030000000, 0x0000000030000000, N("s64") ],
	],
	'ebf8_0': [
		[0x0000000000000000, 0x0000000003800000, N("add") ],
		[0x0000000000800000, 0x0000000003800000, N("min") ],
		[0x0000000001000000, 0x0000000003800000, N("max") ],
		[0x0000000001800000, 0x0000000003800000, N("inc") ],
		[0x0000000002000000, 0x0000000003800000, N("dec") ],
		[0x0000000002800000, 0x0000000003800000, N("and") ],
		[0x0000000003000000, 0x0000000003800000, N("or") ],
		[0x0000000003800000, 0x0000000003800000, N("xor") ],
	],
	'ebf8sz': [
		[0x0000000000000000, 0x0000000000700000, N("u32") ],
		[0x0000000000100000, 0x0000000000700000, N("s32") ],
		[0x0000000000200000, 0x0000000000700000, N("u64") ],
		[0x0000000000300000, 0x0000000000700000, N("ftz"), N("rn"), N("f32") ],
		[0x0000000000400000, 0x0000000000700000, N("u128") ],
		[0x0000000000500000, 0x0000000000700000, N("s64") ],
	],
	'ebf0_0': [
		[0x0000000000000003, 0x0000000000000000, N("ivall") ],
		[0x0000000000000003, 0x0000000000000000, N("ivth"), U13_36 ],
	],
	'ebe0_0': [
		[0x0000008000000000, 0x0000018000000000, N("emit") ],
		[0x0000010000000000, 0x0000018000000000, N("cut") ],
		[0x0000018000000000, 0x0000018000000000, N("emit_then_cut") ],
	],
	'eb40_0': [
		[0x0000000000000000, 0x0010000000000000, N("p") ],
		[0x0010000000000000, 0x0010000000000000, N("d") ],
	],
	'eb40_1': [
		[0x0000000000000000, 0x0000000e00000000, N("t1d") ],
		[0x0000000200000000, 0x0000000e00000000, N("b1d") ],
		[0x0000000400000000, 0x0000000e00000000, N("a1d") ],
		[0x0000000600000000, 0x0000000e00000000, N("t2d") ],
		[0x0000000800000000, 0x0000000e00000000, N("a2d") ],
		[0x0000000a00000000, 0x0000000e00000000, N("t3d") ],
	],
	'eb40_2': [
		[0x0000000000000000, 0x0000000007000000, N("add") ],
		[0x0000000001000000, 0x0000000007000000, N("min") ],
		[0x0000000002000000, 0x0000000007000000, N("max") ],
		[0x0000000003000000, 0x0000000007000000, N("inc") ],
		[0x0000000004000000, 0x0000000007000000, N("dec") ],
		[0x0000000005000000, 0x0000000007000000, N("and") ],
		[0x0000000006000000, 0x0000000007000000, N("or") ],
		[0x0000000007000000, 0x0000000007000000, N("xor") ],
	],
	'eb40_3': [
		[0x0000000000000000, 0x0006000000000000, N("ign") ],
		[0x0002000000000000, 0x0006000000000000 ],
		[0x0004000000000000, 0x0006000000000000, N("trap") ],
	],
	'eb40_4': [
		[0x0000000000000000, 0x0008000000000000, REG_39 ],
		[0x0008000000000000, 0x0008000000000000, U36_13 ],
	],
	'eb20_0': [
		[0x0010000000000000, 0x0010000000800000, N("ba") ],
		[0x0000000000000000, 0x0000000000000000 ],
	],
	'eb20_1': [
		[0x0000000000100000, 0x0010000000f00000, N("r") ],
		[0x0000000000200000, 0x0010000000f00000, N("g") ],
		[0x0000000000300000, 0x0010000000f00000, N("rg") ],
		[0x0000000000400000, 0x0010000000f00000, N("b") ],
		[0x0000000000500000, 0x0010000000f00000, N("rb") ],
		[0x0000000000600000, 0x0010000000f00000, N("gb") ],
		[0x0000000000700000, 0x0010000000f00000, N("rgb") ],
		[0x0000000000800000, 0x0010000000f00000, N("a") ],
		[0x0000000000900000, 0x0010000000f00000, N("ra") ],
		[0x0000000000a00000, 0x0010000000f00000, N("ga") ],
		[0x0000000000b00000, 0x0010000000f00000, N("rga") ],
		[0x0000000000c00000, 0x0010000000f00000, N("ba") ],
		[0x0000000000d00000, 0x0010000000f00000, N("rba") ],
		[0x0000000000e00000, 0x0010000000f00000, N("gba") ],
		[0x0000000000f00000, 0x0010000000f00000, N("rgba") ],
		[0x0010000000000000, 0x0010000000f00000, N("u8") ],
		[0x0010000000100000, 0x0010000000f00000, N("s8") ],
		[0x0010000000200000, 0x0010000000f00000, N("u16") ],
		[0x0010000000300000, 0x0010000000f00000, N("s16") ],
		[0x0010000000400000, 0x0010000000f00000, N("b32") ],
		[0x0010000000500000, 0x0010000000f00000, N("b64") ],
		[0x0010000000600000, 0x0010000000f00000, N("b128") ],
	],
	'eb20_2': [
		[0x0000000000000000, 0x0000000003000000 ],
		[0x0000000001000000, 0x0000000003000000, N("cg") ],
		[0x0000000002000000, 0x0000000003000000, N("cs") ],
		[0x0000000003000000, 0x0000000003000000, N("wt") ],
	],
	'eb00_0': [
		[0x0000000000000000, 0x0000000003000000 ],
		[0x0000000001000000, 0x0000000003000000, N("cg") ],
		[0x0000000002000000, 0x0000000003000000, N("ci") ],
		[0x0000000003000000, 0x0000000003000000, N("cv") ],
	],
	'e3a0_0': [
		[0x0000000000000040, 0x00000000000001c0, N("drain_illegal") ],
		[0x0000000000000080, 0x00000000000001c0, N("cal") ],
		[0x00000000000000c0, 0x00000000000001c0, N("pause") ],
		[0x0000000000000100, 0x00000000000001c0, N("trap") ],
		[0x0000000000000140, 0x00000000000001c0, N("int") ],
		[0x0000000000000180, 0x00000000000001c0, N("drain") ],
	],
	'e360_0': [
		[0x0000000000000000, 0x0000000000000003 ],
		[0x0000000000000001, 0x0000000000000003, N("terminate") ],
		[0x0000000000000002, 0x0000000000000003, N("fallthrough") ],
		[0x0000000000000003, 0x0000000000000003, N("preempted") ],
	],
	'e000_0': [
		[0x0000000000000000, 0x00c0000000000000, N("pass") ],
		[0x0040000000000000, 0x00c0000000000000 ],
		[0x0080000000000000, 0x00c0000000000000, N("constant") ],
		[0x00c0000000000000, 0x00c0000000000000, N("sc") ],
	],
	'e000_1': [
		[0x0000000000000000, 0x0030000000000000 ],
		[0x0010000000000000, 0x0030000000000000, N("centroid") ],
		[0x0020000000000000, 0x0030000000000000, N("offset") ],
	],
	'df60_0': [
		[0x0000000000000000, 0x0000000060000000, N("t1d") ],
		[0x0000000020000000, 0x0000000060000000, N("t2d") ],
		[0x0000000040000000, 0x0000000060000000, N("t3d") ],
		[0x0000000060000000, 0x0000000060000000, N("tcube") ],
	],
	'df50_0': [
		[0x0000000000400000, 0x000000000fc00000, N("dimension") ],
		[0x0000000000800000, 0x000000000fc00000, N("texture_type") ],
		[0x0000000001400000, 0x000000000fc00000, N("sample_pos") ],
		[0x0000000004000000, 0x000000000fc00000, N("filter") ],
		[0x0000000004800000, 0x000000000fc00000, N("lod") ],
		[0x0000000005000000, 0x000000000fc00000, N("wrap") ],
		[0x0000000005800000, 0x000000000fc00000, N("border_color") ],
	],
	'df00_0': [
		[0x0000000000000000, 0x0030000000000000, N("r") ],
		[0x0010000000000000, 0x0030000000000000, N("g") ],
		[0x0020000000000000, 0x0030000000000000, N("b") ],
		[0x0030000000000000, 0x0030000000000000, N("a") ],
	],
	'def8_0': [
		[0x0000000000000000, 0x000000c000000000, N("r") ],
		[0x0000004000000000, 0x000000c000000000, N("g") ],
		[0x0000008000000000, 0x000000c000000000, N("b") ],
		[0x000000c000000000, 0x000000c000000000, N("a") ],
	],
	'def8_1': [
		[0x0000000000000000, 0x0000003000000000 ],
		[0x0000001000000000, 0x0000003000000000, N("aoffi") ],
		[0x0000002000000000, 0x0000003000000000, N("ptp") ],
	],
	'deb8_0': [
		[0x0000000000000000, 0x000000e000000000 ],
		[0x0000002000000000, 0x000000e000000000, N("lz") ],
		[0x0000004000000000, 0x000000e000000000, N("lb") ],
		[0x0000006000000000, 0x000000e000000000, N("ll") ],
		[0x000000c000000000, 0x000000e000000000, N("lba") ],
		[0x000000e000000000, 0x000000e000000000, N("lla") ],
	],
	'dc38_0': [
		[0x0000000000000000, 0x0080000000000000, N("lz") ],
		[0x0080000000000000, 0x0080000000000000, N("ll") ],
	],
	'da00_0': [
		[0x0000000000000000, 0x01e0000000000000, N("lz") ],
		[0x0020000000000000, 0x01e0000000000000, N("ll") ],
		[0x0040000000000000, 0x01e0000000000000, N("lz") ],
		[0x0080000000000000, 0x01e0000000000000, N("lz"), N("aoffi") ],
		[0x00a0000000000000, 0x01e0000000000000, N("ll") ],
		[0x00c0000000000000, 0x01e0000000000000, N("lz"), N("mz") ],
		[0x00e0000000000000, 0x01e0000000000000, N("lz") ],
		[0x0100000000000000, 0x01e0000000000000, N("lz") ],
		[0x0180000000000000, 0x01e0000000000000, N("ll"), N("aoffi") ],
	],
	'da00_1': [
		[0x0000000000000000, 0x01e0000000000000, N("t1d") ],
		[0x0020000000000000, 0x01e0000000000000, N("t1d") ],
		[0x0040000000000000, 0x01e0000000000000, N("t2d") ],
		[0x0080000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00a0000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00c0000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00e0000000000000, 0x01e0000000000000, N("t3d") ],
		[0x0100000000000000, 0x01e0000000000000, N("a2d") ],
		[0x0180000000000000, 0x01e0000000000000, N("t2d") ],
	],
	'da00_2': [
		[0x0000000ff0000000, 0x001c000ff0000000, N("r") ],
		[0x0004000ff0000000, 0x001c000ff0000000, N("g") ],
		[0x0008000ff0000000, 0x001c000ff0000000, N("b") ],
		[0x000c000ff0000000, 0x001c000ff0000000, N("a") ],
		[0x0010000ff0000000, 0x001c000ff0000000, N("rg") ],
		[0x0014000ff0000000, 0x001c000ff0000000, N("ra") ],
		[0x0018000ff0000000, 0x001c000ff0000000, N("ga") ],
		[0x001c000ff0000000, 0x001c000ff0000000, N("ba") ],
		[0x0000000000000000, 0x001c000000000000, N("rgb") ],
		[0x0004000000000000, 0x001c000000000000, N("rga") ],
		[0x0008000000000000, 0x001c000000000000, N("rba") ],
		[0x000c000000000000, 0x001c000000000000, N("gba") ],
		[0x0010000000000000, 0x001c000000000000, N("rgba") ],
	],
	'd800_0': [
		[0x0000000000000000, 0x01e0000000000000, N("lz") ],
		[0x0020000000000000, 0x01e0000000000000 ],
		[0x0040000000000000, 0x01e0000000000000, N("lz") ],
		[0x0060000000000000, 0x01e0000000000000, N("ll") ],
		[0x0080000000000000, 0x01e0000000000000, N("dc") ],
		[0x00a0000000000000, 0x01e0000000000000, N("ll"), N("dc") ],
		[0x00c0000000000000, 0x01e0000000000000, N("lz"), N("dc") ],
		[0x00e0000000000000, 0x01e0000000000000 ],
		[0x0100000000000000, 0x01e0000000000000, N("lz") ],
		[0x0120000000000000, 0x01e0000000000000, N("lz"), N("dc") ],
		[0x0140000000000000, 0x01e0000000000000 ],
		[0x0160000000000000, 0x01e0000000000000, N("lz") ],
		[0x0180000000000000, 0x01e0000000000000 ],
		[0x01a0000000000000, 0x01e0000000000000, N("ll") ],
	],
	'd800_1': [
		[0x0000000000000000, 0x01e0000000000000, N("t1d") ],
		[0x0020000000000000, 0x01e0000000000000, N("t2d") ],
		[0x0040000000000000, 0x01e0000000000000, N("t2d") ],
		[0x0060000000000000, 0x01e0000000000000, N("t2d") ],
		[0x0080000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00a0000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00c0000000000000, 0x01e0000000000000, N("t2d") ],
		[0x00e0000000000000, 0x01e0000000000000, N("a2d") ],
		[0x0100000000000000, 0x01e0000000000000, N("a2d") ],
		[0x0120000000000000, 0x01e0000000000000, N("a2d") ],
		[0x0140000000000000, 0x01e0000000000000, N("t3d") ],
		[0x0160000000000000, 0x01e0000000000000, N("t3d") ],
		[0x0180000000000000, 0x01e0000000000000, N("tcube") ],
		[0x01a0000000000000, 0x01e0000000000000, N("tcube") ],
	],
	'c838_0': [
		[0x0000000000000000, 0x0300000000000000, N("r") ],
		[0x0100000000000000, 0x0300000000000000, N("g") ],
		[0x0200000000000000, 0x0300000000000000, N("b") ],
		[0x0300000000000000, 0x0300000000000000, N("a") ],
	],
	'c838_1': [
		[0x0000000000000000, 0x00c0000000000000 ],
		[0x0040000000000000, 0x00c0000000000000, N("aoffi") ],
		[0x0080000000000000, 0x00c0000000000000, N("ptp") ],
	],
	'c038_0': [
		[0x0000000000000000, 0x0380000000000000 ],
		[0x0080000000000000, 0x0380000000000000, N("lz") ],
		[0x0100000000000000, 0x0380000000000000, N("lb") ],
		[0x0180000000000000, 0x0380000000000000, N("ll") ],
		[0x0300000000000000, 0x0380000000000000, N("lba") ],
		[0x0380000000000000, 0x0380000000000000, N("lla") ],
	],
	'a000_0': [
		[0x0000000000000000, 0x0300000000000000 ],
		[0x0100000000000000, 0x0300000000000000, N("cg") ],
		[0x0200000000000000, 0x0300000000000000, N("ct") ],
		[0x0300000000000000, 0x0300000000000000, N("wt") ],
	],
	'a000_1': [
		[0x0000000000000000, 0x00e0000000000000, N("u8") ],
		[0x0020000000000000, 0x00e0000000000000, N("s8") ],
		[0x0040000000000000, 0x00e0000000000000, N("u16") ],
		[0x0060000000000000, 0x00e0000000000000, N("s16") ],
		[0x0080000000000000, 0x00e0000000000000, N("b32") ],
		[0x00a0000000000000, 0x00e0000000000000, N("b64") ],
		[0x00c0000000000000, 0x00e0000000000000, N("b128") ],
	],
	'8000_0': [
		[0x0000000000000000, 0x0300000000000000 ],
		[0x0100000000000000, 0x0300000000000000, N("cg") ],
		[0x0200000000000000, 0x0300000000000000, N("ci") ],
		[0x0300000000000000, 0x0300000000000000, N("cv") ],
	],
	'7c00_0': [
		[0x0000000000000000, 0x001e000000000000, N("f") ],
		[0x0002000000000000, 0x001e000000000000, N("lt") ],
		[0x0004000000000000, 0x001e000000000000, N("eq") ],
		[0x0006000000000000, 0x001e000000000000, N("le") ],
		[0x0008000000000000, 0x001e000000000000, N("gt") ],
		[0x000a000000000000, 0x001e000000000000, N("ne") ],
		[0x000c000000000000, 0x001e000000000000, N("ge") ],
		[0x000e000000000000, 0x001e000000000000, N("num") ],
		[0x0010000000000000, 0x001e000000000000, N("nan") ],
		[0x0012000000000000, 0x001e000000000000, N("ltu") ],
		[0x0014000000000000, 0x001e000000000000, N("equ") ],
		[0x0016000000000000, 0x001e000000000000, N("leu") ],
		[0x0018000000000000, 0x001e000000000000, N("gtu") ],
		[0x001a000000000000, 0x001e000000000000, N("neu") ],
		[0x001c000000000000, 0x001e000000000000, N("geu") ],
		[0x001e000000000000, 0x001e000000000000, N("t") ],
	],
	'6080_0': [
		[0x0000000000000000, 0x0600000000000000 ],
		[0x0200000000000000, 0x0600000000000000, N("ftz") ],
		[0x0400000000000000, 0x0600000000000000, N("fmz") ],
	],
	'5f00_0': [
		[0x0000000000000000, 0x0001004000000000, N("u8") ],
		[0x0000004000000000, 0x0001004000000000, N("u16") ],
		[0x0001000000000000, 0x0001004000000000, N("s8") ],
		[0x0001004000000000, 0x0001004000000000, N("s16") ],
	],
	'5f00_2': [
		[0x0000000000000000, 0x0018000000000000 ],
		[0x0008000000000000, 0x0018000000000000, N("shr7") ],
		[0x0010000000000000, 0x0018000000000000, N("shr15") ],
	],
	'5f00_3': [
		[0x0000000000000000, 0x0000003000000000 ],
		[0x0000001000000000, 0x0000003000000000, N("b1") ],
		[0x0000002000000000, 0x0000003000000000, N("b2") ],
		[0x0000003000000000, 0x0000003000000000, N("b3") ],
	],
	'5d18_0': [
		[0x0000000000000000, 0x0000007800000000, N("f") ],
		[0x0000000800000000, 0x0000007800000000, N("lt") ],
		[0x0000001000000000, 0x0000007800000000, N("eq") ],
		[0x0000001800000000, 0x0000007800000000, N("le") ],
		[0x0000002000000000, 0x0000007800000000, N("gt") ],
		[0x0000002800000000, 0x0000007800000000, N("ne") ],
		[0x0000003000000000, 0x0000007800000000, N("ge") ],
		[0x0000003800000000, 0x0000007800000000, N("num") ],
		[0x0000004000000000, 0x0000007800000000, N("nan") ],
		[0x0000004800000000, 0x0000007800000000, N("ltu") ],
		[0x0000005000000000, 0x0000007800000000, N("equ") ],
		[0x0000005800000000, 0x0000007800000000, N("leu") ],
		[0x0000006000000000, 0x0000007800000000, N("gtu") ],
		[0x0000006800000000, 0x0000007800000000, N("neu") ],
		[0x0000007000000000, 0x0000007800000000, N("geu") ],
		[0x0000007800000000, 0x0000007800000000, N("t") ],
	],
	'5d10_0': [
		[0x0000000000000000, 0x0006000000000000 ],
		[0x0002000000000000, 0x0006000000000000, N("f32") ],
		[0x0004000000000000, 0x0006000000000000, N("mrg_h0") ],
		[0x0006000000000000, 0x0006000000000000, N("mrg_h1") ],
	],
	'5d10_1': [
		[0x0000000000000000, 0x0001800000000000 ],
		[0x0000800000000000, 0x0001800000000000, N("f32") ],
		[0x0001000000000000, 0x0001800000000000, N("h0_h0") ],
		[0x0001800000000000, 0x0001800000000000, N("h1_h1") ],
	],
	'5d10_2': [
		[0x0000000000000000, 0x0000000030000000 ],
		[0x0000000010000000, 0x0000000030000000, N("f32") ],
		[0x0000000020000000, 0x0000000030000000, N("h0_h0") ],
		[0x0000000030000000, 0x0000000030000000, N("h1_h1") ],
	],
	'5d08_0': [
		[0x0000000000000000, 0x0000018000000000 ],
		[0x0000008000000000, 0x0000018000000000, N("ftz") ],
		[0x0000010000000000, 0x0000018000000000, N("fmz") ],
	],
	'5d00_0': [
		[0x0000000000000000, 0x0000006000000000 ],
		[0x0000002000000000, 0x0000006000000000, N("ftz") ],
		[0x0000004000000000, 0x0000006000000000, N("fmz") ],
	],
	'5d00_1': [
		[0x0000000000000000, 0x0000001800000000 ],
		[0x0000000800000000, 0x0000001800000000, N("f32") ],
		[0x0000001000000000, 0x0000001800000000, N("h0_h0") ],
		[0x0000001800000000, 0x0000001800000000, N("h1_h1") ],
	],
	'5cf8_1': [
		[0x0000000000000000, 0x0000006000000000 ],
		[0x0000004000000000, 0x0000006000000000, N("u64") ],
		[0x0000006000000000, 0x0000006000000000, N("s64") ],
	],
	'5cf8_0': [
		[0x0000000000000000, 0x0003000000000000 ],
		[0x0001000000000000, 0x0003000000000000, N("hi") ],
		[0x0002000000000000, 0x0003000000000000, N("x") ],
		[0x0003000000000000, 0x0003000000000000, N("xhi") ],
	],
	'5cf0_0': [
		[0x0000000000000000, 0x0000010000000000, N("pr") ],
		[0x0000010000000000, 0x0000010000000000, N("cc") ],
	],
	'5cf0_1': [
		[0x0000000000000000, 0x0000060000000000 ],
		[0x0000020000000000, 0x0000060000000000, N("b1") ],
		[0x0000040000000000, 0x0000060000000000, N("b2") ],
		[0x0000060000000000, 0x0000060000000000, N("b3") ],
	],
	'5ce0_0': [
		[0x0000000000000000, 0x0000000000001300, N("u8") ],
		[0x0000000000000100, 0x0000000000001300, N("u16") ],
		[0x0000000000000200, 0x0000000000001300, N("u32") ],
		[0x0000000000001000, 0x0000000000001300, N("s8") ],
		[0x0000000000001100, 0x0000000000001300, N("s16") ],
		[0x0000000000001200, 0x0000000000001300, N("s32") ],
	],
	'5ce0_1': [
		[0x0000000000000000, 0x0000000000002c00, N("u8") ],
		[0x0000000000000400, 0x0000000000002c00, N("u16") ],
		[0x0000000000000800, 0x0000000000002c00, N("u32") ],
		[0x0000000000002000, 0x0000000000002c00, N("s8") ],
		[0x0000000000002400, 0x0000000000002c00, N("s16") ],
		[0x0000000000002800, 0x0000000000002c00, N("s32") ],
	],
	'5cc0_0': [
		[0x0000000000000000, 0x0000006000000000 ],
		[0x0000002000000000, 0x0000006000000000, N("rs") ],
		[0x0000004000000000, 0x0000006000000000, N("ls") ],
	],
	'5cc0_1': [
		[0x0000000000000000, 0x0000001800000000 ],
		[0x0000000800000000, 0x0000001800000000, N("h0") ],
		[0x0000001000000000, 0x0000001800000000, N("h1") ],
	],
	'5cc0_2': [
		[0x0000000000000000, 0x0000000600000000 ],
		[0x0000000200000000, 0x0000000600000000, N("h0") ],
		[0x0000000400000000, 0x0000000600000000, N("h1") ],
	],
	'5cc0_3': [
		[0x0000000000000000, 0x0000000180000000 ],
		[0x0000000080000000, 0x0000000180000000, N("h0") ],
		[0x0000000100000000, 0x0000000180000000, N("h1") ],
	],
	'5cb8_0': [
		[0x0000000000000100, 0x0000000000000300, N("f16") ],
		[0x0000000000000200, 0x0000000000000300, N("f32") ],
		[0x0000000000000300, 0x0000000000000300, N("f64") ],
	],
	'5cb8_1': [
		[0x0000000000000000, 0x0000000000002c00, N("u8") ],
		[0x0000000000000400, 0x0000000000002c00, N("u16") ],
		[0x0000000000000800, 0x0000000000002c00, N("u32") ],
		[0x0000000000000c00, 0x0000000000002c00, N("u64") ],
		[0x0000000000002000, 0x0000000000002c00, N("s8") ],
		[0x0000000000002400, 0x0000000000002c00, N("s16") ],
		[0x0000000000002800, 0x0000000000002c00, N("s32") ],
		[0x0000000000002c00, 0x0000000000002c00, N("s64") ],
	],
	'5cb8_2': [
		[0x0000000000000000, 0x0000018000000000 ],
		[0x0000008000000000, 0x0000018000000000, N("rm") ],
		[0x0000010000000000, 0x0000018000000000, N("rp") ],
		[0x0000018000000000, 0x0000018000000000, N("rz") ],
	],
	'5cb0_2': [
		[0x0000000000000000, 0x0000000000001300, N("u8") ],
		[0x0000000000000100, 0x0000000000001300, N("u16") ],
		[0x0000000000000200, 0x0000000000001300, N("u32") ],
		[0x0000000000000300, 0x0000000000001300, N("u64") ],
		[0x0000000000001000, 0x0000000000001300, N("s8") ],
		[0x0000000000001100, 0x0000000000001300, N("s16") ],
		[0x0000000000001200, 0x0000000000001300, N("s32") ],
		[0x0000000000001300, 0x0000000000001300, N("u64") ],
	],
	'5cb0_0': [
		[0x0000000000000400, 0x0000000000000c00, N("f16") ],
		[0x0000000000000800, 0x0000000000000c00, N("f32") ],
		[0x0000000000000c00, 0x0000000000000c00, N("f64") ],
	],
	'5cb0_1': [
		[0x0000000000000000, 0x0000018000000000 ],
		[0x0000008000000000, 0x0000018000000000, N("floor") ],
		[0x0000010000000000, 0x0000018000000000, N("ceil") ],
		[0x0000018000000000, 0x0000018000000000, N("trunc") ],
	],
	'5ca8_0': [
		[0x0000000000000000, 0x0000058000000000 ],
		[0x0000018000000000, 0x0000058000000000, N("pass") ],
		[0x0000040000000000, 0x0000058000000000, N("round") ],
		[0x0000048000000000, 0x0000058000000000, N("floor") ],
		[0x0000050000000000, 0x0000058000000000, N("ceil") ],
		[0x0000058000000000, 0x0000058000000000, N("trunc") ],
	],
	'5c90_0': [
		[0x0000000000000000, 0x0000008000000000, N("sincos") ],
		[0x0000008000000000, 0x0000008000000000, N("ex2") ],
	],
	'5c88_0': [
		[0x0000000000000000, 0x00001f8000000000, N("divide") ],
	],
	'5c68_0': [
		[0x0000000000000000, 0x0000300000000000 ],
		[0x0000100000000000, 0x0000300000000000, N("ftz") ],
		[0x0000200000000000, 0x0000300000000000, N("fmz") ],
	],
	'5c68_1': [
		[0x0000000000000000, 0x00000e0000000000 ],
		[0x0000020000000000, 0x00000e0000000000, N("d2") ],
		[0x0000040000000000, 0x00000e0000000000, N("d4") ],
		[0x0000060000000000, 0x00000e0000000000, N("d8") ],
		[0x0000080000000000, 0x00000e0000000000, N("m8") ],
		[0x00000a0000000000, 0x00000e0000000000, N("m4") ],
		[0x00000c0000000000, 0x00000e0000000000, N("m2") ],
	],
	'5c40_0': [
		[0x0000000000000000, 0x0000060000000000, N("and") ],
		[0x0000020000000000, 0x0000060000000000, N("or") ],
		[0x0000040000000000, 0x0000060000000000, N("xor") ],
		[0x0000060000000000, 0x0000060000000000, N("pass_b") ],
	],
	'5c40_1': [
		[0x0000000000000000, 0x0000300000000000 ],
		[0x0000100000000000, 0x0000300000000000, N("t") ],
		[0x0000200000000000, 0x0000300000000000, N("z") ],
		[0x0000300000000000, 0x0000300000000000, N("nz") ],
	],
	'5c30_0': [
		[0x0000000000000000, 0x0001000000000000, N("u32") ],
		[0x0001000000000000, 0x0001000000000000 ],
	],
	'5c38_0': [
		[0x0000000000000000, 0x0000010000000000, N("u32") ],
		[0x0000010000000000, 0x0000010000000000, N("s32") ],
	],
	'5c38_1': [
		[0x0000000000000000, 0x0000020000000000, N("u32") ],
		[0x0000020000000000, 0x0000020000000000, N("s32") ],
	],
	'5c20_0': [
		[0x0000000000000000, 0x0000180000000000 ],
		[0x0000080000000000, 0x0000180000000000, N("xlo") ],
		[0x0000100000000000, 0x0000180000000000, N("xmed") ],
		[0x0000180000000000, 0x0000180000000000, N("xhi") ],
	],
	'5be0_0': [
		[0x0000000000000000, 0x0000003000000000 ],
		[0x0000001000000000, 0x0000003000000000, N("t") ],
		[0x0000002000000000, 0x0000003000000000, N("z") ],
		[0x0000003000000000, 0x0000003000000000, N("nz") ],
	],
	'5bc0_0': [
		[0x0000000000000000, 0x000f000000000000 ],
		[0x0001000000000000, 0x000f000000000000, N("f4e") ],
		[0x0002000000000000, 0x000f000000000000, N("b4e") ],
		[0x0003000000000000, 0x000f000000000000, N("rc8") ],
		[0x0004000000000000, 0x000f000000000000, N("ecl") ],
		[0x0005000000000000, 0x000f000000000000, N("ecr") ],
		[0x0006000000000000, 0x000f000000000000, N("rc16") ],
	],
	'5bb0_0': [
		[0x0000000000000000, 0x000f000000000000, N("f") ],
		[0x0001000000000000, 0x000f000000000000, N("lt") ],
		[0x0002000000000000, 0x000f000000000000, N("eq") ],
		[0x0003000000000000, 0x000f000000000000, N("le") ],
		[0x0004000000000000, 0x000f000000000000, N("gt") ],
		[0x0005000000000000, 0x000f000000000000, N("ne") ],
		[0x0006000000000000, 0x000f000000000000, N("ge") ],
		[0x0007000000000000, 0x000f000000000000, N("num") ],
		[0x0008000000000000, 0x000f000000000000, N("nan") ],
		[0x0009000000000000, 0x000f000000000000, N("ltu") ],
		[0x000a000000000000, 0x000f000000000000, N("equ") ],
		[0x000b000000000000, 0x000f000000000000, N("leu") ],
		[0x000c000000000000, 0x000f000000000000, N("gtu") ],
		[0x000d000000000000, 0x000f000000000000, N("neu") ],
		[0x000e000000000000, 0x000f000000000000, N("geu") ],
		[0x000f000000000000, 0x000f000000000000, N("t") ],
	],
	'5bb0_1': [
		[0x0000000000000000, 0x0000600000000000, N("and") ],
		[0x0000200000000000, 0x0000600000000000, N("or") ],
		[0x0000400000000000, 0x0000600000000000, N("xor") ],
	],
	'5b70_0': [
		[0x0000000000000000, 0x000c000000000000 ],
		[0x0004000000000000, 0x000c000000000000, N("rm") ],
		[0x0008000000000000, 0x000c000000000000, N("rp") ],
		[0x000c000000000000, 0x000c000000000000, N("rz") ],
	],
	'5b60_0': [
		[0x0000000000000000, 0x000e000000000000, N("f") ],
		[0x0002000000000000, 0x000e000000000000, N("lt") ],
		[0x0004000000000000, 0x000e000000000000, N("eq") ],
		[0x0006000000000000, 0x000e000000000000, N("le") ],
		[0x0008000000000000, 0x000e000000000000, N("gt") ],
		[0x000a000000000000, 0x000e000000000000, N("ne") ],
		[0x000c000000000000, 0x000e000000000000, N("ge") ],
		[0x000e000000000000, 0x000e000000000000, N("t") ],
	],
	'5b00_0': [
		[0x0000000000000000, 0x0003000000000000 ],
		[0x0001000000000000, 0x0003000000000000, N("s16"), N("u16") ],
		[0x0002000000000000, 0x0003000000000000, N("u16"), N("s16") ],
		[0x0003000000000000, 0x0003000000000000, N("s16"), N("s16") ],
	],
	'5b00_1': [
		[0x0000000000000000, 0x001c000000000000 ],
		[0x0004000000000000, 0x001c000000000000, N("clo") ],
		[0x0008000000000000, 0x001c000000000000, N("chi") ],
		[0x000c000000000000, 0x001c000000000000, N("csfu") ],
		[0x0010000000000000, 0x001c000000000000, N("cbcc") ],
	],
	'5a80_0': [
		[0x0000000000000000, 0x0007000000000000, N("u32") ],
		[0x0001000000000000, 0x0007000000000000, N("s32") ],
		[0x0002000000000000, 0x0007000000000000, N("u24") ],
		[0x0003000000000000, 0x0007000000000000, N("s24") ],
		[0x0004000000000000, 0x0007000000000000, N("u16h0") ],
		[0x0005000000000000, 0x0007000000000000, N("s16h0") ],
		[0x0006000000000000, 0x0007000000000000, N("u16h1") ],
		[0x0007000000000000, 0x0007000000000000, N("s16h1") ],
	],
	'5a80_1': [
		[0x0000000000000000, 0x0060000000000000, N("u24") ],
		[0x0020000000000000, 0x0060000000000000, N("s24") ],
		[0x0040000000000000, 0x0060000000000000, N("u16h0") ],
		[0x0060000000000000, 0x0060000000000000, N("s16h0") ],
	],
	'5a80_2': [
		[0x0000000000000000, 0x0019000000000000, N("u32") ],
		[0x0001000000000000, 0x0019000000000000, N("s32") ],
		[0x0008000000000000, 0x0019000000000000, N("u24") ],
		[0x0009000000000000, 0x0019000000000000, N("s24") ],
		[0x0010000000000000, 0x0019000000000000, N("u16h0") ],
		[0x0011000000000000, 0x0019000000000000, N("s16h0") ],
	],
	'5a00_0': [
		[0x0000000000000000, 0x0001000000000000, N("u32") ],
		[0x0001000000000000, 0x0001000000000000, N("s32") ],
	],
	'5a00_1': [
		[0x0000000000000000, 0x0020000000000000, N("u32") ],
		[0x0020000000000000, 0x0020000000000000, N("s32") ],
	],
	'5980_0': [
		[0x0000000000000000, 0x0060000000000000 ],
		[0x0020000000000000, 0x0060000000000000, N("ftz") ],
		[0x0040000000000000, 0x0060000000000000, N("fmz") ],
	],
	'5980_1': [
		[0x0000000000000000, 0x0018000000000000 ],
		[0x0008000000000000, 0x0018000000000000, N("rm") ],
		[0x0010000000000000, 0x0018000000000000, N("rp") ],
		[0x0018000000000000, 0x0018000000000000, N("rz") ],
	],

	'5700_0': [
		[0x0000000000000000, 0x0040000000000000, N("ud") ],
		[0x0040000000000000, 0x0040000000000000 ],
	],
	'5700_1': [
		[0x0000000000000000, 0x0001004000000000, N("u8") ],
		[0x0000004000000000, 0x0001004000000000, N("u16") ],
		[0x0001000000000000, 0x0001004000000000, N("s8") ],
		[0x0001004000000000, 0x0001004000000000, N("s16") ],
	],
	'5700_2': [
		[0x0000000000000000, 0x0004000000000000, N("u16") ],
		[0x0004000000000000, 0x0004000000000000, N("u8") ],
	],
	'5700_3': [
		[0x0000000000000000, 0x0038000000000000, N("mrg_16h") ],
		[0x0008000000000000, 0x0038000000000000, N("mrg_16l") ],
		[0x0010000000000000, 0x0038000000000000, N("mrg_8b0") ],
		[0x0018000000000000, 0x0038000000000000, N("mrg_8b2") ],
		[0x0020000000000000, 0x0038000000000000, N("acc") ],
		[0x0028000000000000, 0x0038000000000000, N("min") ],
		[0x0030000000000000, 0x0038000000000000, N("max") ],
		[0x0038000000000000, 0x0038000000000000 ],
	],
	'53d8_0': [
		[0x0000000000000000, 0x0007000000000000, N("4a"), N("u8") ],
		[0x0001000000000000, 0x0007000000000000, N("2a"), N("lo"), N("u16") ],
		[0x0002000000000000, 0x0007000000000000, N("4a"), N("s8") ],
		[0x0003000000000000, 0x0007000000000000, N("2a"), N("lo"), N("s16") ],
		[0x0005000000000000, 0x0007000000000000, N("2a"), N("hi"), N("u16") ],
		[0x0007000000000000, 0x0007000000000000, N("2a"), N("hi"), N("s16") ],
	],
	'53d8_1': [
		[0x0000000000000000, 0x0000800000000000, N("u8") ],
		[0x0000800000000000, 0x0000800000000000, N("s8") ],
	],
	'5100_0': [
		[0x0000000000000000, 0x000c000000000000 ],
		[0x0004000000000000, 0x000c000000000000, N("clo") ],
		[0x0008000000000000, 0x000c000000000000, N("chi") ],
		[0x000c000000000000, 0x000c000000000000, N("csfu") ],
	],
	'50f0_0': [
		[0x0000000000000000, 0x0000980000000000, N("f") ],
		[0x0000080000000000, 0x0000980000000000, N("lt") ],
		[0x0000100000000000, 0x0000980000000000, N("eq") ],
		[0x0000180000000000, 0x0000980000000000, N("le") ],
		[0x0000800000000000, 0x0000980000000000, N("gt") ],
		[0x0000880000000000, 0x0000980000000000, N("ne") ],
		[0x0000900000000000, 0x0000980000000000, N("ge") ],
		[0x0000980000000000, 0x0000980000000000, N("t") ],
	],
	'50f0_1_const': [
		[0x0000000000000000, 0x0002000000000000, U16_20 ],
		[0x0002000000000000, 0x0002000000000000, S16_20 ],
	],
	'50f0_1_reg_8': [
		[0x0000000000000000, 0x0000000030000000, N("b0") ],
		[0x0000000010000000, 0x0000000030000000, N("b1") ],
		[0x0000000020000000, 0x0000000030000000, N("b2") ],
		[0x0000000030000000, 0x0000000030000000, N("b3") ],
	],
	'50f0_1_size': [
		[0x0000000000000000, 0x0002000040000000, N("u8"), T("50f0_1_reg_8") ],
		[0x0002000000000000, 0x0002000040000000, N("s8"), T("50f0_1_reg_8") ],
		[0x0000000040000000, 0x0002000070000000, N("u16"), N("h0") ],
		[0x0002000040000000, 0x0002000070000000, N("s16"), N("h0") ],
		[0x0000000050000000, 0x0002000070000000, N("u16"), N("h1") ],
		[0x0002000050000000, 0x0002000070000000, N("s16"), N("h1") ],
		[0x0000000060000000, 0x0002000070000000, N("u32") ],
		[0x0002000060000000, 0x0002000070000000, N("s32") ],
	],
	'50f0_1': [
		[0x0000000000000000, 0x0004000000000000, T("50f0_1_const") ],
		[0x0004000000000000, 0x0004000000000000, T("50f0_1_size"), REG_20 ],
	],

	'50e0_0': [
		[0x0000000000000000, 0x0003000000000000, N("r") ],
		[0x0001000000000000, 0x0003000000000000, N("a") ],
		[0x0002000000000000, 0x0003000000000000, N("ra") ],
	],
	'50d8_0': [
		[0x0000000000000000, 0x0003000000000000, N("all") ],
		[0x0001000000000000, 0x0003000000000000, N("any") ],
		[0x0002000000000000, 0x0003000000000000, N("eq") ],
	],
	'50b0_0': [
		[0x0000000000000000, 0x0000000000001f00, N("f") ],
		[0x0000000000000100, 0x0000000000001f00, N("lt") ],
		[0x0000000000000200, 0x0000000000001f00, N("eq") ],
		[0x0000000000000300, 0x0000000000001f00, N("le") ],
		[0x0000000000000400, 0x0000000000001f00, N("gt") ],
		[0x0000000000000500, 0x0000000000001f00, N("ne") ],
		[0x0000000000000600, 0x0000000000001f00, N("ge") ],
		[0x0000000000000700, 0x0000000000001f00, N("num") ],
		[0x0000000000000800, 0x0000000000001f00, N("nan") ],
		[0x0000000000000900, 0x0000000000001f00, N("ltu") ],
		[0x0000000000000a00, 0x0000000000001f00, N("equ") ],
		[0x0000000000000b00, 0x0000000000001f00, N("leu") ],
		[0x0000000000000c00, 0x0000000000001f00, N("gtu") ],
		[0x0000000000000d00, 0x0000000000001f00, N("neu") ],
		[0x0000000000000e00, 0x0000000000001f00, N("geu") ],
		[0x0000000000000f00, 0x0000000000001f00 ],
		[0x0000000000001000, 0x0000000000001f00, N("off") ],
		[0x0000000000001100, 0x0000000000001f00, N("lo") ],
		[0x0000000000001200, 0x0000000000001f00, N("sff") ],
		[0x0000000000001300, 0x0000000000001f00, N("ls") ],
		[0x0000000000001400, 0x0000000000001f00, N("hi") ],
		[0x0000000000001500, 0x0000000000001f00, N("sft") ],
		[0x0000000000001600, 0x0000000000001f00, N("hs") ],
		[0x0000000000001700, 0x0000000000001f00, N("oft") ],
		[0x0000000000001800, 0x0000000000001f00, N("csm_ta") ],
		[0x0000000000001900, 0x0000000000001f00, N("csm_tr") ],
		[0x0000000000001a00, 0x0000000000001f00, N("csm_mx") ],
		[0x0000000000001b00, 0x0000000000001f00, N("fcsm_ta") ],
		[0x0000000000001c00, 0x0000000000001f00, N("fcsm_tr") ],
		[0x0000000000001d00, 0x0000000000001f00, N("fcsm_mx") ],
		[0x0000000000001e00, 0x0000000000001f00, N("rle") ],
		[0x0000000000001f00, 0x0000000000001f00, N("rgt") ],
	],
	'5090_0': [
		[0x0000000000000000, 0x0000000003000000, N("and") ],
		[0x0000000001000000, 0x0000000003000000, N("or") ],
		[0x0000000002000000, 0x0000000003000000, N("xor") ],
	],
	'5080_0': [
		[0x0000000000000000, 0x0000000000f00000, N("cos") ],
		[0x0000000000100000, 0x0000000000f00000, N("sin") ],
		[0x0000000000200000, 0x0000000000f00000, N("ex2") ],
		[0x0000000000300000, 0x0000000000f00000, N("lg2") ],
		[0x0000000000400000, 0x0000000000f00000, N("rcp") ],
		[0x0000000000500000, 0x0000000000f00000, N("rsq") ],
		[0x0000000000600000, 0x0000000000f00000, N("rcp64h") ],
		[0x0000000000700000, 0x0000000000f00000, N("rsq64h") ],
	],
	'5000_0': [
		[0x0000000000000000, 0x0001000000000000, N("u8") ],
		[0x0001000000000000, 0x0001000000000000, N("s28") ],
	],
	'5000_1': [
		[0x0000000000000000, 0x0002000000000000, N("u8") ],
		[0x0002000000000000, 0x0002000000000000, N("s8") ],
	],
	'5000_2': [
		[0x0000000000000000, 0x0018003000000000 ],
		[0x0008000000000000, 0x0018003000000000, N("x") ],
		[0x0010000000000000, 0x0018003000000000, N("y") ],
		[0x0018000000000000, 0x0018003000000000, N("xy") ],
		[0x0000001000000000, 0x0018003000000000, N("z") ],
		[0x0008001000000000, 0x0018003000000000, N("xz") ],
		[0x0010001000000000, 0x0018003000000000, N("xy") ],
		[0x0018001000000000, 0x0018003000000000, N("xyz") ],
		[0x0000002000000000, 0x0018003000000000, N("w") ],
		[0x0008002000000000, 0x0018003000000000, N("xw") ],
		[0x0010002000000000, 0x0018003000000000, N("yw") ],
		[0x0018002000000000, 0x0018003000000000, N("xyw") ],
		[0x0000003000000000, 0x0018003000000000, N("zw") ],
		[0x0008003000000000, 0x0018003000000000, N("xzw") ],
		[0x0010003000000000, 0x0018003000000000, N("xyw") ],
		[0x0018003000000000, 0x0018003000000000, N("xyzw") ],
	],
	'5000_3': [
		[0x0000000000000000, 0x0000000f00000000, N("0000") ],
		[0x0000000100000000, 0x0000000f00000000, N("1111") ],
		[0x0000000200000000, 0x0000000f00000000, N("2222") ],
		[0x0000000300000000, 0x0000000f00000000, N("3333") ],
		[0x0000000400000000, 0x0000000f00000000 ],
		[0x0000000500000000, 0x0000000f00000000, N("4321") ],
		[0x0000000600000000, 0x0000000f00000000, N("5432") ],
		[0x0000000700000000, 0x0000000f00000000, N("6543") ],
		[0x0000000800000000, 0x0000000f00000000, N("3201") ],
		[0x0000000900000000, 0x0000000f00000000, N("3012") ],
		[0x0000000a00000000, 0x0000000f00000000, N("0213") ],
		[0x0000000b00000000, 0x0000000f00000000, N("3120") ],
		[0x0000000c00000000, 0x0000000f00000000, N("1230") ],
		[0x0000000d00000000, 0x0000000f00000000, N("2310") ],
	],
	'5000_4': [
		[0x0000000000000000, 0x00000000f0000000, N("4444") ],
		[0x0000000010000000, 0x00000000f0000000, N("5555") ],
		[0x0000000020000000, 0x00000000f0000000, N("6666") ],
		[0x0000000030000000, 0x00000000f0000000, N("7777") ],
		[0x0000000040000000, 0x00000000f0000000 ],
		[0x0000000050000000, 0x00000000f0000000, N("6543") ],
		[0x0000000060000000, 0x00000000f0000000, N("5432") ],
		[0x0000000070000000, 0x00000000f0000000, N("4321") ],
		[0x0000000080000000, 0x00000000f0000000, N("4567") ],
		[0x0000000090000000, 0x00000000f0000000, N("6745") ],
		[0x00000000a0000000, 0x00000000f0000000, N("5467") ],
	],
	'5000_5': [
		[0x0000000000000000, 0x0060000000000000 ],
		[0x0020000000000000, 0x0060000000000000, N("acc") ],
	],
	'2c00_0': [
		[0x0000000000000000, 0x0060000000000000 ],
		[0x0020000000000000, 0x0060000000000000, N("f32") ],
		[0x0040000000000000, 0x0060000000000000, N("h0_h0") ],
		[0x0060000000000000, 0x0060000000000000, N("h1_h1") ],
	],
	'2a00_0': [
		[0x0000000000000000, 0x0180000000000000 ],
		[0x0080000000000000, 0x0180000000000000, N("ftz") ],
		[0x0100000000000000, 0x0180000000000000, N("fmz") ],
	],
	'1f00_0': [
		[0x0000000000000000, 0x0040000000000000, N("u32") ],
		[0x0040000000000000, 0x0040000000000000, N("s32") ],
	],
	'1f00_1': [
		[0x0000000000000000, 0x0080000000000000, N("u32") ],
		[0x0080000000000000, 0x0080000000000000, N("s32") ],
	],
	'1000_0': [
		[0x0000000000000000, 0x0200000000000000, N("u32") ],
		[0x0200000000000000, 0x0200000000000000, N("s32") ],
	],
	'0400_0': [
		[0x0000000000000000, 0x0060000000000000, N("and") ],
		[0x0020000000000000, 0x0060000000000000, N("or") ],
		[0x0040000000000000, 0x0060000000000000, N("xor") ],
		[0x0060000000000000, 0x0060000000000000, N("pass_b") ],
	],
	'f0a8_0': [
		[0x0000000200000000, 0x0000009b00000000, N("red"), N("popc") ],
		[0x0000000300000000, 0x0000009b00000000, N("scan") ],
		[0x0000000a00000000, 0x0000009b00000000, N("red"), N("and") ],
		[0x0000001200000000, 0x0000009b00000000, N("red"), N("or") ],
		[0x0000008000000000, 0x0000009b00000000, N("sync") ],
		[0x0000008100000000, 0x0000009b00000000, N("arrive") ],
	],
	'f0a8_1': [
		[0x0000000000000000, 0x0000180000000000, REG_08, REG_20 ],
		[0x0000080000000000, 0x0000180000000000, REG_08, U12_20 ],
		[0x0000100000000000, 0x0000180000000000, U08_08, REG_20 ],
		[0x0000180000000000, 0x0000180000000000, U08_08, U12_20 ],
	],
	'ea80_0': [
		[0x0000000010000000, 0x0000000010000000, N("ba") ],
		[0x0000000000000000, 0x0000000000000000 ],
	],
	'ea80_1': [
		[0x0000000000000000, 0x0000007000000000, N("u32") ],
		[0x0000001000000000, 0x0000007000000000, N("s32") ],
		[0x0000002000000000, 0x0000007000000000, N("u64") ],
		[0x0000003000000000, 0x0000007000000000, N("f32") ],
		[0x0000005000000000, 0x0000007000000000, N("s64") ],
		[0x0000006000000000, 0x0000007000000000, N("sd32") ],
		[0x0000007000000000, 0x0000007000000000, N("sd64") ],
	],
	'ea80_2': [
		[0x0000000000000000, 0x0038000000000000, N("u32") ],
		[0x0008000000000000, 0x0038000000000000, N("s32") ],
		[0x0010000000000000, 0x0038000000000000, N("u64") ],
		[0x0018000000000000, 0x0038000000000000, N("f32") ],
		[0x0028000000000000, 0x0038000000000000, N("s64") ],
		[0x0030000000000000, 0x0038000000000000, N("sd32") ],
		[0x0038000000000000, 0x0038000000000000, N("sd64") ],
	],
	'ea00_0': [
		[0x0000000000000000, 0x00000001e0000000, N("add") ],
		[0x0000000020000000, 0x00000001e0000000, N("min") ],
		[0x0000000040000000, 0x00000001e0000000, N("max") ],
		[0x0000000060000000, 0x00000001e0000000, N("inc") ],
		[0x0000000080000000, 0x00000001e0000000, N("dec") ],
		[0x00000000a0000000, 0x00000001e0000000, N("and") ],
		[0x00000000c0000000, 0x00000001e0000000, N("or") ],
		[0x00000000e0000000, 0x00000001e0000000, N("xor") ],
		[0x0000000100000000, 0x00000001e0000000, N("exch") ],
	],
}

def build_mask(mask_len):
	n = 0
	for i in xrange(mask_len):
		n |= (1 << i)
	return n

def ParserT(ins):
	remaining = ins[4:]
	if remaining in T_LookupTable:
		return T_LookupTable[remaining]
	else:
		None

def ParseON(ins):
	remaining = ins[4:]
	idx = remaining.find('_')
	bit = int(remaining[:idx])
	name = remaining[idx+1:]
	return bit, name

def ParseImmediate(ins):
	if ins == 'U03_26':
		return build_mask(3) << 26
	elif ins == 'U04_12':
		return build_mask(4) << 12
	elif ins == 'U04_28':
		return build_mask(4) << 28
	elif ins == 'U04_31':
		return build_mask(4) << 31
	elif ins == 'U04_39':
		return build_mask(4) << 39
	elif ins == 'U05_20':
		return build_mask(5) << 20
	elif ins == 'U05_28':
		return build_mask(5) << 28
	elif ins == 'U05_39':
		return build_mask(5) << 39
	elif ins == 'U05_51':
		return build_mask(5) << 51
	elif ins == 'U05_53':
		return build_mask(5) << 53
	elif ins == 'U06_20':
		return build_mask(6) << 20
	elif ins == 'U06_00':
		return build_mask(6) << 0
	elif ins == 'U08_08':
		return build_mask(8) << 8
	elif ins == 'U08_20':
		return build_mask(8) << 20
	elif ins == 'U08_28':
		return build_mask(8) << 28
	elif ins == 'U08_48':
		return build_mask(8) << 48
	elif ins == 'U09_20':
		return build_mask(9) << 20
	elif ins == 'U09_30':
		return build_mask(9) << 30
	elif ins == 'U12_20':
		return build_mask(12) << 20
	elif ins == 'U13_34':
		return build_mask(13) << 34
	elif ins == 'U13_36':
		return build_mask(13) << 36
	elif ins == 'U16_20':
		return build_mask(16) << 20
	elif ins == 'U16_36':
		return build_mask(16) << 36
	elif ins == 'U20_20':
		return build_mask(20) << 20
	elif ins == 'U24_20':
		return build_mask(24) << 20
	elif ins == 'U32_20':
		return build_mask(32) << 20
	elif ins == 'U36_13':
		return build_mask(13) << 36
	elif ins == 'S11_20':
		return build_mask(11) << 20
	elif ins == 'S16_20':
		return build_mask(16) << 20
	elif ins == 'S24_20':
		return build_mask(24) << 20
	elif ins == 'S32_20':
		return build_mask(32) << 20
	elif ins == 'O14_20':
		return build_mask(14) << 20
	elif ins == 'S20_20':
		a = build_mask(19) << 20
		b = 1 << 56
		return a | b
	elif ins == 'F19_20':
		a = build_mask(19) << 20
		b = 1 << 56
		return a | b
	elif ins == 'D19_20':
		a = build_mask(19) << 20
		b = 1 << 56
		return a | b
	elif ins == 'F20_20':
		a = build_mask(19) << 20
		b = 1 << 56
		return a | b
	elif ins == 'D20_20':
		a = build_mask(19) << 20
		b = 1 << 56
		return a | b
	elif ins == 'F32_20':
		return build_mask(2) << 20
	else:
		print ins
		return None

def ParseREG(ins):
	remaining = ins[4:]
	return int(remaining)

def ParsePred(ins):
	remaining = ins[4:]
	return int(remaining)

def ON(bit, reg):
    return '$ON_%d_%s' % (bit, reg)

def ZN(bit, reg): # Not on
    return '$ZN_%d_%s' % (bit, reg)


NOT = False

instruction_table = [
	[ 0xfbe0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "out"), T("_fbe0_0"), REG_00, REG_08, REG_20 ],
	[ 0xf6e0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "out"), T("_fbe0_0"), REG_00, REG_08, S20_20 ],
	[ 0xf0f8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "sync"), T("_f0f8_0") ],
	[ 0xf0f0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "depbar"), T("_f0f0_0"), U03_26, U06_20, U06_00 ],
	[ 0xf0c8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "mov"), REG_00, SYS_20 ],
	[ 0xf0c0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "r2b"), T("_f0c0_0"), U04_28, REG_20 ],
	[ 0xf0b8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "b2r"), REG_00, U08_08 ],
	[ 0xf0a8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bar"), T("_f0a8_0"), T("_f0a8_1"), T("_pred39") ],
	[ 0xeff0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "st"), ON(31, "p"), T("_eff0_0"), AMEM, REG_00, REG_39 ],
	[ 0xefe8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "pixld"), T("_efe8_0"), REG_00, PRED45, PLDMEM ],
	[ 0xefd8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "ld"), ON(32, "o"), ON(31, "p"), T("_eff0_0"), REG_00, AMEM, REG_39 ],
	[ 0xefd0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "isberd"), ON(32, "o"), T("_efd0_0"), ON(31, "skew"), T("_efd0sz"), REG_00, ISBERDMEM ],
	[ 0xefa0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "al2p"), ON(32, "o"), T("_eff0_0"), PRED44, REG_00, REG_08, S11_20 ],
	[ 0xef98000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "membar"), T("_ef98_0"), T("_ef98_1") ],
	[ 0xef90000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "ld"), T("_ef90_0"), T("_ef90sz"), REG_00, C36_08_S16_20 ],
	[ 0xef80000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(      "cctll"), T("_ef80ct"), T("_ef80_0"), CCTLLMEM ],
	[ 0xef60000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(       "cctl"), ON(52, "e"), T("_ef60ct"), T("_ef60_0"), CCTLMEM ],
	[ 0xef58000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "st"), T("_ef58sz"), SMEM, REG_00 ],
	[ 0xef50000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "st"), T("_ef50_0"), T("_ef58sz"), LMEM, REG_00 ],
	[ 0xef48000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "ld"), ON(44, "u"), T("_ef58sz"), REG_00, SMEM ],
	[ 0xef40000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(         "ld"), T("_ef40_0"), T("_ef58sz"), REG_00, LMEM ],
	[ 0xef10000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "shfl"), T("_ef10_0"), PRED48, REG_00, REG_08, T("_ef10_1") ],
	[ 0xeef0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "atom"), N("cas"), ON(48, "e"), T("_eef0sz"), REG_00, ATOMMEM0, REG_20 ],
	[ 0xeed8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "stg"), ON(45, "e"), T("_eed8_0"), T("_ef58sz"), NCGMEM, REG_00 ],
	[ 0xeed0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "ldg"), ON(45, "e"), T("_eed0_0"), T("_eed0sz"), REG_00, NCGMEM ],
	[ 0xeea0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "stp"), ON(31, "wait"), U08_20 ],
	[ 0xee00000000000000, 0xff80000000000000, OP8B, T("_pred"), N(      "atoms"), T("_ee00_0"), T("_ee00sz"), REG_00, ATOMMEM1, REG_20],
	[ 0xed00000000000000, 0xff00000000000000, OP8B, T("_pred"), N(       "atom"), T("_ed00_0"), ON(48, "e"), T("_ed00sz"), REG_00, ATOMMEM0, REG_20 ],
	[ 0xec00000000000000, 0xff00000000000000, OP8B, T("_pred"), N(      "atoms"), T("_ec00_0"), T("_ec00sz"), REG_00, ATOMMEM1, REG_20 ],
	[ 0xebf8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "red"), T("_ebf8_0"), ON(48, "e"), T("_ebf8sz"), REDMEM0, REG_00 ],
	[ 0xebf0000000000000, 0xfff9000000000000, OP8B, T("_pred"), N(      "cctlt"), T("_ebf0_0") ],
	[ 0xebe0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "out"), T("_ebe0_0"), REG_00, REG_08, C34_RZ_O14_20 ],
	[ 0xeb40000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(      "sured"), T("_eb40_0"), T("_eb40_1"), T("_eb40_2"), T("_eb40_3"), SUREDMEM, REG_00, T("_eb40_4") ],
	[ 0xeb20000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(       "sust"), T("_eb40_0"), T("_eb20_0"), T("_eb40_1"), T("_eb20_1"), T("_eb20_2"), T("_eb40_3"), SUREDMEM, REG_00, T("_eb40_4") ],
	[ 0xeb00000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(       "suld"), T("_eb40_0"),            T("_eb40_1"), T("_eb20_1"), T("_eb00_0"), T("_eb40_3"), REG_00, SUREDMEM, T("_eb40_4") ],
	[ 0xeac0000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(     "suatom"), T("_eb40_0"), T("_ea80_0"), T("_ea80_1"), T("_eb40_1"), N("cas"), T("_eb40_3"), REG_00, SUREDMEM, REG_20, T("_eb40_4") ],
	[ 0xea80000000000000, 0xffc0000000000000, OP8B, T("_pred"), N(     "suatom"), N("d"), T("_ea80_0"), T("_ea80_2"), T("_eb40_1"), N("cas"), T("_eb40_3"), REG_00, SUREDMEM, REG_20, U36_13 ],
	[ 0xea60000000000000, 0xffe0000000000000, OP8B, T("_pred"), N(     "suatom"), T("_eb40_0"), T("_ea80_0"), T("_ea80_1"), T("_eb40_1"), T("_ea00_0"), T("_eb40_3"), REG_00, SUREDMEM, REG_20, T("_eb40_4") ],
	[ 0xea00000000000000, 0xffc0000000000000, OP8B, T("_pred"), N(     "suatom"), N("d"), T("_ea80_0"), T("_ea80_2"), T("_eb40_1"), T("_ea00_0"), T("_eb40_3"), REG_00, SUREDMEM, REG_20, U36_13 ],
	[ 0xe3a0000000000000, 0xfff0000000000000, OP8B,          N(        "bpt"), T("_e3a0_0"), U20_20 ],
	[ 0xe390000000000000, 0xfff0000000000000, OP8B,          N(        "ide"), ZN(5, "_en"), U16_20 ],
	[ 0xe380000000000000, 0xfff0000000000000, OP8B,          N(        "ram") ],
	[ 0xe370000000000000, 0xfff0000000000000, OP8B,          N(        "sam") ],
	[ 0xe360000000000000, 0xfff0000000000000, OP8B,          N(        "rtt"), T("_e360_0") ],
	[ 0xe350000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "cont"), T("_f0f8_0") ],
	[ 0xe340000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "brk"), T("_f0f8_0") ],
	[ 0xe330000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "kil"), T("_f0f8_0") ],
	[ 0xe320000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "ret"), T("_f0f8_0") ],
	[ 0xe310000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(    "longjmp"), T("_f0f8_0") ],
	[ 0xe300000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "exit"), ON(5, "keeprefcount"), T("_f0f8_0") ],
	[ 0xe2f0000000000000, 0xfff0000000000000, OP8B,          N("setlmembase"), REG_08 ],
	[ 0xe2e0000000000000, 0xfff0000000000000, OP8B,          N(  "setcrsptr"), REG_08 ],
	[ 0xe2d0000000000000, 0xfff0000000000000, OP8B,          N("getlmembase"), REG_00 ],
	[ 0xe2c0000000000000, 0xfff0000000000000, OP8B,          N(  "getcrsptr"), REG_00 ],
	[ 0xe2b0000000000020, 0xfff0000000000020, OP8B,          N(       "pcnt"), C36_RZ_S16_20 ],
	[ 0xe2b0000000000000, 0xfff0000000000020, OP8B,          N(       "pcnt"), BTARG ],
	[ 0xe2a0000000000020, 0xfff0000000000020, OP8B,          N(        "pbk"), C36_RZ_S16_20 ],
	[ 0xe2a0000000000000, 0xfff0000000000020, OP8B,          N(        "pbk"), BTARG ],
	[ 0xe290000000000020, 0xfff0000000000020, OP8B,          N(        "ssy"), C36_RZ_S16_20 ],
	[ 0xe290000000000000, 0xfff0000000000020, OP8B,          N(        "ssy"), BTARG ],
	[ 0xe280000000000020, 0xfff0000000000020, OP8B,          N(   "plongjmp"), C36_RZ_S16_20 ],
	[ 0xe280000000000000, 0xfff0000000000020, OP8B,          N(   "plongjmp"), BTARG ],
	[ 0xe270000000000020, 0xfff0000000000020, OP8B,          N(       "pret"), ZN(6, "_noinc"), C36_RZ_S16_20 ],
	[ 0xe270000000000000, 0xfff0000000000020, OP8B,          N(       "pret"), ZN(6, "_noinc"), BTARG ],
	[ 0xe260000000000020, 0xfff0000000000020, OP8B,          N(        "cal"), ZN(6, "_noinc"), C36_RZ_S16_20 ],
	[ 0xe260000000000000, 0xfff0000000000020, OP8B,          N(        "cal"), ZN(6, "_noinc"), BTARG ],
	[ 0xe250000000000020, 0xfff0000000000020, OP8B, T("_pred"), N(        "brx"), ON(6, "lmt"), T("_f0f8_0"), C36_08_S16_20 ],
	[ 0xe250000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "brx"), ON(6, "lmt"), T("_f0f8_0"), REG_08, S24_20 ],
	[ 0xe240000000000020, 0xfff0000000000020, OP8B, T("_pred"), N(        "bra"), ON(7, "u"), ON(6, "lmt"), T("_f0f8_0"), C36_RZ_S16_20 ],
	[ 0xe240000000000000, 0xfff0000000000020, OP8B, T("_pred"), N(        "bra"), ON(7, "u"), ON(6, "lmt"), T("_f0f8_0"), BTARG ],
	[ 0xe230000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "pexit"), BTARG ],
	[ 0xe220000000000020, 0xfff0000000000020, OP8B, T("_pred"), N(       "jcal"), ON(6, "noinc"), C36_RZ_S16_20 ],
	[ 0xe220000000000000, 0xfff0000000000020, OP8B, T("_pred"), N(       "jcal"), ON(6, "noinc"), U32_20 ],
	[ 0xe210000000000020, 0xfff0000000000020, OP8B, T("_pred"), N(        "jmp"), ON(7, "u"), ON(6, "lmt"), T("_f0f8_0"), C36_RZ_S16_20 ],
	[ 0xe210000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "jmp"), ON(7, "u"), ON(6, "lmt"), T("_f0f8_0"), U32_20 ],
	[ 0xe200000000000020, 0xfff0000000000020, OP8B, T("_pred"), N(        "jmx"), ON(6, "lmt"), T("_f0f8_0"), REG_08, C36_08_S16_20 ],
	[ 0xe200000000000000, 0xfff0000000000020, OP8B, T("_pred"), N(        "jmx"), ON(6, "lmt"), T("_f0f8_0"), REG_08, S32_20 ],
	[ 0xe00000000000ff00, 0xff0000400000ff00, OP8B, T("_pred"), N(        "ipa"), T("_e000_0"), T("_e000_1"), ON(51, "sat"), REG_00, AMEM28, REG_20, REG_39, T("_pred47") ],
	[ 0xe000004000000000, 0xff00004000000000, OP8B, T("_pred"), N(        "ipa"), N("idx"), T("_e000_0"), T("_e000_1"), ON(51, "sat"), REG_00, AMEMIDX, REG_20, REG_39, T("_pred39") ],
	[ 0xdf60000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "tmml"), N("b"), N("lod"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08, REG_20, N("0x0"), ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xdf58000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "tmml"),         N("lod"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08,           U13_36, ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xdf50000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "txq"), N("b"), ON(49, "nodep"), REG_00, REG_08, T("_df50_0"), U13_36, U04_31 ],
	[ 0xdf48000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "txq"),         ON(49, "nodep"), REG_00, REG_08, T("_df50_0"), U13_36, U04_31 ],
	[ 0xdf40000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "txa"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08, U13_36, U04_31 ],
	[ 0xdf00000000000000, 0xffc0000000000000, OP8B, T("_pred"), N(      "tld4s"), T("_df00_0"), ON(51, "aoffi"), ON(50, "dc"), ON(49, "nodep"), REG_28, REG_00, REG_08, REG_20, U13_36 ],
	[ 0xdef8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "tld4"), T("_def8_0"), N("b"), T("_def8_1"), ON(50, "dc"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08, REG_20, N("0x0"), ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xdeb8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "tex"), N("b"), T("_deb8_0"), ON(36, "aoffi"), ON(50, "dc"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08, REG_20, N("0x0"), ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xde78000000000000, 0xfffc000000000000, OP8B, T("_pred"), N(        "txd"), N("b"), ON(35, "aoffi"), ON(49, "nodep"), REG_00, REG_08, REG_20, N("0x0"), ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xde38000000000000, 0xfffc000000000000, OP8B, T("_pred"), N(        "txd"),         ON(35, "aoffi"), ON(49, "nodep"), REG_00, REG_08, REG_20,   U13_36, ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xdd38000000000000, 0xff38000000000000, OP8B, T("_pred"), N(        "tld"), N("b"), T("_dc38_0"), ON(35, "aoffi"), ON(50, "ms"), ON(54, "cl"), ON(49, "nodep"), REG_00, REG_08, REG_20, N("0x0"), ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xdc38000000000000, 0xff38000000000000, OP8B, T("_pred"), N(        "tld"),         T("_dc38_0"), ON(35, "aoffi"), ON(50, "ms"), ON(54, "cl"), ON(49, "nodep"), REG_00, REG_08, REG_20,   U13_36, ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xda00000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "tlds"), T("_da00_0"), ON(49, "nodep"), REG_28, REG_00, REG_08, REG_20, U13_36, T("_da00_1"), T("_da00_2") ],
	[ 0xd800000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "texs"), T("_d800_0"), ON(49, "nodep"), REG_28, REG_00, REG_08, REG_20, U13_36, T("_d800_1"), T("_da00_2") ],
	[ 0xc838000000000000, 0xfc38000000000000, OP8B, T("_pred"), N(       "tld4"), T("_c838_0"), T("_c838_1"), ON(50, "dc"), ON(35, "ndv"), ON(49, "nodep"), REG_00, REG_08, REG_20, U13_36, ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xc038000000000000, 0xfc38000000000000, OP8B, T("_pred"), N(        "tex"), T("_c038_0"), ON(54, "aoffi"), ON(50, "dc"), ON(49, "nodep"), REG_00, REG_08, REG_20, U13_36, ON(28, "array"), T("_df60_0"), U04_31 ],
	[ 0xa000000000000000, 0xe000000000000000, OP8B, T("_pred"), N(         "st"), ON(52, "e"), T("_a000_0"), T("_a000_1"), GMEM, REG_00, PRED58],
	[ 0x8000000000000000, 0xe000000000000000, OP8B, T("_pred"), N(         "ld"), ON(52, "e"), T("_8000_0"), T("_a000_1"), REG_00, GMEM, PRED58],
	[ 0x7e80000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(     "hsetp2"), T("_7c00_0"), ON(53, "h_and"), ON(6, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), ON(54, "abs"), C34_RZ_O14_20, ON(42, "NOT"), PRED39],
	[ 0x7e00000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(     "hsetp2"), T("_7c00_0"), ON(53, "h_and"), ON(6, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), U09_30, ON(29, "neg"), U09_20, ON(42, "NOT"), PRED39],
	[ 0x7c80000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hset2"), ON(53, "bf"), T("_7c00_0"), ON(54, "ftz"), T("_5bb0_1"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), ON(54, "abs"), C34_RZ_O14_20, ON(42, "NOT"), PRED39],
	[ 0x7c00000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hset2"), ON(53, "bf"), T("_7c00_0"), ON(54, "ftz"), T("_5bb0_1"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), U09_30, ON(29, "neg"), U09_20, ON(42, "NOT"), PRED39],
	[ 0x7a00000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hadd2"), ON(39, "ftz"), ON(52, "sat"), T("_5d10_0"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), U09_30, ON(29, "neg"), U09_20],
	[ 0x7a80000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hadd2"), ON(39, "ftz"), ON(52, "sat"), T("_5d10_0"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), ON(54, "abs"), C34_RZ_O14_20],
	[ 0x7800000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hmul2"), T("_5d08_0"), ON(52, "sat"), T("_5d10_0"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(56, "neg"), U09_30, ON(29, "neg"), U09_20],
	[ 0x7880000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(      "hmul2"), T("_5d08_0"), ON(52, "sat"), T("_5d10_0"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(54, "abs"), C34_RZ_O14_20],
	[ 0x7080000000000000, 0xf880000000000000, OP8B, T("_pred"), N(      "hfma2"), T("_6080_0"), ON(52, "sat"), T("_5d10_0"), REG_00, T("_5d10_1"), REG_08, ON(56, "neg"), C34_RZ_O14_20, ON(51, "neg"), T("_2c00_0"), REG_39],
	[ 0x7000000000000000, 0xf880000000000000, OP8B, T("_pred"), N(      "hfma2"), T("_6080_0"), ON(52, "sat"), T("_5d10_0"), REG_00, T("_5d10_1"), REG_08, ON(56, "neg"), U09_30, ON(29, "neg"), U09_20, ON(51, "neg"), T("_2c00_0"), REG_39],
	[ 0x6080000000000000, 0xf880000000000000, OP8B, T("_pred"), N(      "hfma2"), T("_6080_0"), ON(52, "sat"), T("_5d10_0"), REG_00, T("_5d10_1"), REG_08, ON(56, "neg"), T("_2c00_0"), REG_39, ON(51, "neg"), C34_RZ_O14_20],
	[ 0x5f00000000000000, 0xff00000000000000, OP8B, T("_pred"), N(       "vmad"), T("_5f00_0"), T("_5f00_2"), ON(55, "sat"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, T("_50f0_1"), REG_39 ],
	[ 0x5d20000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "hsetp2"), T("_5d18_0"), ON(49, "h_and"), ON(6, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(31, "neg"), ON(30, "abs"), T("_5d10_2"), REG_20, ON(42, "NOT"), PRED39],
	[ 0x5d18000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "hset2"), ON(49, "bf"), T("_5d18_0"), ON(50, "ftz"), T("_5bb0_1"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(31, "neg"), ON(30, "abs"), T("_5d10_2"), REG_20, ON(42, "NOT"), PRED39],
	[ 0x5d10000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "hadd2"), ON(39, "ftz"), ON(32, "sat"), T("_5d10_0"), REG_00, ON(43, "neg"), ON(44, "abs"), T("_5d10_1"), REG_08, ON(31, "neg"), ON(30, "abs"), T("_5d10_2"), REG_20],
	[ 0x5d08000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "hmul2"), T("_5d08_0"), ON(32, "sat"), T("_5d10_0"), REG_00, ON(44, "abs"), T("_5d10_1"), REG_08, ON(31, "neg"), ON(30, "abs"), T("_5d10_2"), REG_20],
	[ 0x5d00000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "hfma2"), T("_5d00_0"), ON(32, "sat"), T("_5d10_0"), REG_00, T("_5d10_1"), REG_08, ON(31, "neg"), T("_5d10_2"), REG_20, ON(30, "neg"), T("_5d00_1"), REG_39],
	[ 0x5cf8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shf"), N("r"), ON(50, "w"), T("_5cf8_1"), T("_5cf8_0"), ON(47, "cc"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5cf0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "r2p"), T("_5cf0_0"), T("_5cf0_1"), REG_08, REG_20 ],
	[ 0x5ce8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "p2r"), T("_5cf0_1"), REG_00, T("_5cf0_0"), REG_08, REG_20 ],
	[ 0x5ce0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "i2i"), T("_5ce0_0"), T("_5ce0_1"), ON(50, "sat"), ON(47, "cc"), REG_00, T("_5cf0_1"), ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5cc0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "iadd3"), T("_5cc0_0"), ON(48, "x"), ON(47, "cc"), REG_00, ON(51, "neg"), T("_5cc0_1"), REG_08, ON(50, "neg"), T("_5cc0_2"), REG_20, ON(49, "neg"), T("_5cc0_3"), REG_39 ],
	[ 0x5cb8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "i2f"), T("_5cb8_0"), T("_5cb8_1"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"),  T("_5cf0_1"), REG_20 ],
	[ 0x5cb0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "f2i"), ON(44, "ftz"), T("_5cb0_2"), T("_5cb0_0"), T("_5cb0_1"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5ca8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "f2f"), ON(44, "ftz"), T("_5cb0_0"), T("_5cb8_0"), T("_5ca8_0"), ON(50, "sat"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), REG_20],
	[ 0x5ca0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "sel"), REG_00, REG_08, REG_20, T("_pred39") ],
	[ 0x5c98000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "mov"), REG_00, REG_20, U04_39 ],
	[ 0x5c90000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "rro"), T("_5c90_0"), REG_00, ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5c88000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fchk"), T("_5c88_0"), PRED03, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5c80000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "dmul"), T("_5cb8_2"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_20 ],
	[ 0x5c70000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "dadd"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5c68000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fmul"), T("_5c68_0"), T("_5c68_1"), T("_5cb8_2"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_20 ],
	[ 0x5c60000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "fmnmx"), ON(44, "ftz"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), REG_20, T("_pred39") ],
	[ 0x5c58000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fadd"), ON(44, "ftz"), ON(50, "sat"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), REG_20 ],
	[ 0x5c50000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "dmnmx"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), REG_20, T("_pred39") ],
	[ 0x5c48000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shl"), ON(39, "w"), ON(43, "x"), ON(47, "cc"), REG_00, REG_08, REG_20 ],
	[ 0x5c40000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "lop"), T("_5c40_0"), ON(43, "x"), T("_5c40_1"), PRED48, ON(47, "cc"), REG_00, ON(39, "inv"), REG_08, ON(40, "inv"), REG_20 ],
	[ 0x5c38000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "imul"), T("_5c38_0"), T("_5c38_1"), ON(39, "hi"), ON(47, "cc"), REG_00, REG_08, REG_20 ],
	[ 0x5c30000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "flo"), T("_5c30_0"), ON(41, "sh"), ON(47, "cc"), REG_00, ON(40, "inv"), REG_20 ],
	[ 0x5c28000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shr"), T("_5c30_0"), ON(39, "w"), ON(44, "x"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, REG_20 ],
	[ 0x5c20000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "imnmx"), T("_5c30_0"), T("_5c20_0"), ON(47, "cc"), REG_00, REG_08, REG_20, T("_pred39") ],
	[ 0x5c18000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "iscadd"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), REG_20, U05_39 ],
	[ 0x5c10000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "iadd"), ON(50, "sat"), ON(43, "x"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), REG_20 ],
	[ 0x5c08000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "popc"), REG_00, ON(40, "inv"), REG_20 ],
	[ 0x5c00000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bfe"), T("_5c30_0"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, REG_20 ],
	[ 0x5bf8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shf"), N("l"), ON(50, "w"), T("_5cf8_1"), T("_5cf8_0"), ON(47, "cc"), REG_00, REG_08, REG_20, REG_39  ],
	[ 0x5bf0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bfi"), ON(47, "cc"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5be0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "lop3"), N("lut"), ON(38, "x"), T("_5be0_0"), PRED48, ON(47, "cc"), REG_00, REG_08, REG_20, REG_39, U08_28 ],
	[ 0x5bd8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "lea"), N("hi"), ON(38, "x"), PRED48, ON(47, "cc"), REG_00, ON(37, "neg"), REG_08, REG_20, REG_39, U05_28 ],
	[ 0x5bd0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "lea"), ON(46, "x"), PRED48, ON(47, "cc"), REG_00, ON(45, "neg"), REG_08, REG_20, U05_39 ],
	[ 0x5bc0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "prmt"), T("_5bc0_0"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5bb0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "fsetp"), T("_5bb0_0"), ON(47, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), REG_20, T("_pred39") ],
	[ 0x5ba0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "fcmp"), T("_5bb0_0"), ON(47, "ftz"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5b80000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "dsetp"), T("_5bb0_0"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), REG_20, T("_pred39") ],
	[ 0x5b70000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "dfma"), T("_5b70_0"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_20, ON(49, "neg"), REG_39 ],
	[ 0x5b60000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "isetp"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), PRED03, PRED00, REG_08, REG_20, T("_pred39") ],
	[ 0x5b50000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "iset"), ON(44, "bf"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), ON(47, "cc"), REG_00, REG_08, REG_20, T("_pred39") ],
	[ 0x5b40000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "icmp"), T("_5b60_0"), T("_5c30_0"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5b00000000000000, 0xffc0000000000000, OP8B, T("_pred"), N(       "xmad"), T("_5b00_0"), ON(36, "psl"), ON(37, "mrg"), T("_5b00_1"), ON(38, "x"), ON(47, "cc"), REG_00, ON(53, "h1"), REG_08, ON(35, "h1"), REG_20, REG_39  ],
	[ 0x5a80000000000000, 0xff80000000000000, OP8B, T("_pred"), N(     "imadsp"), T("_5a80_0"), T("_5a80_1"), T("_5a80_2"),  ON(47, "cc"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5a00000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "imad"), T("_5a00_0"), T("_5a00_1"), ON(54, "hi"), ON(50, "sat"), ON(49, "x"), ON(47, "c"), REG_00, REG_08, REG_20, REG_39 ],
	[ 0x5980000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "ffma"), T("_5980_0"), T("_5980_1"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_20, ON(49, "neg"), REG_39 ],
	[ 0x5900000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "dset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), REG_20, T("_pred39")  ],
	[ 0x5800000000000000, 0xff00000000000000, OP8B, T("_pred"), N(       "fset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(55, "ftz"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), REG_20, T("_pred39") ],
	[ 0x5700000000000000, 0xff00000000000000, OP8B, T("_pred"), N(       "vshl"), T("_5700_0"), T("_5700_1"), T("_5700_2"), ON(49, "w"), ON(55, "sat"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, U16_20, REG_39 ],
	[ 0x5600000000000000, 0xff00000000000000, OP8B, T("_pred"), N(       "vshr"), T("_5700_0"), T("_5700_1"), T("_5700_2"), ON(49, "w"), ON(55, "sat"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, U16_20, REG_39 ],
	[ 0x5400000000000000, 0xff00000000000000, OP8B, T("_pred"), N(   "vabsdiff"), ON(54, "sd"), T("_5700_1"), ON(55, "sat"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, T("_50f0_1"), REG_39 ],
	[ 0x53f8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "idp"), T("_53d8_0"), REG_00, REG_08, T("_53d8_1"), REG_20, REG_39],
	[ 0x53f0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bfi"), ON(47, "cc"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x53d8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "idp"), T("_53d8_0"), REG_00, REG_08, T("_53d8_1"), C34_RZ_O14_20, REG_39],
	[ 0x53c0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "prmt"), T("_5bc0_0"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x53a0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "fcmp"), T("_5bb0_0"), ON(47, "ftz"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x5370000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "dfma"), T("_5b70_0"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_39, ON(49, "neg"), C34_RZ_O14_20 ],
	[ 0x5340000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "icmp"), T("_5b60_0"), T("_5c30_0"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x5280000000000000, 0xff80000000000000, OP8B, T("_pred"), N(     "imadsp"), T("_5a80_0"), T("_5a80_1"), T("_5a80_2"),  ON(47, "cc"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x5200000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "imad"), T("_5a00_0"), T("_5a00_1"), ON(54, "hi"), ON(50, "sat"), ON(49, "x"), ON(47, "c"), REG_00, REG_08, REG_39, C34_RZ_O14_20 ],
	[ 0x5180000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "ffma"), T("_5980_0"), T("_5980_1"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), REG_39, ON(49, "neg"), C34_RZ_O14_20 ],
	[ 0x5100000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "xmad"), T("_5b00_0"), T("_5100_0"), ON(54, "x"), ON(47, "cc"), REG_00, ON(53, "h1"), REG_08, ON(52, "h1"), REG_39, C34_RZ_O14_20 ],
	[ 0x50f8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(    "fswzadd"), ON(44, "ftz"), T("_5cb8_2"), ON(38, "ndv"), ON(47, "cc"), REG_00, REG_08, REG_20, U08_28 ],
	[ 0x50f0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "vsetp"), T("_50f0_0"), T("_5700_1"), T("_5bb0_1"), PRED03, PRED00, T("_5f00_3"), REG_08, T("_50f0_1"),  T("_pred39") ],
	[ 0x50e0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "vote"), N("vtg"), T("_50e0_0"), U24_20 ],
	[ 0x50d8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "vote"), T("_50d8_0"), REG_00, PRED45, T("_pred39") ],
	[ 0x50d0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "lepc"), REG_00 ],
	[ 0x50c8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "cs2r"), REG_00, SYS_20 ],
	[ 0x50b0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "nop"), ON(13, "trig"), T("_50b0_0"), U16_20 ],
	[ 0x50a0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "csetp"), T("_50b0_0"), T("_5bb0_1"), PRED03, PRED00, N("cc"), T("_pred39") ],
	[ 0x5098000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "cset"), ON(44, "bf"), T("_50b0_0"), T("_5bb0_1"), REG_00, N("cc"), T("_pred39") ],
	[ 0x5090000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "psetp"), T("_5090_0"), T("_5bb0_1"), PRED03, PRED00, T("_pred12"), T("_pred29"), T("_pred39") ],
	[ 0x5088000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "pset"), ON(44, "bf"), T("_5090_0"), T("_5bb0_1"), ON(47, "cc"), REG_00, T("_pred12"), T("_pred29"), T("_pred39") ],
	[ 0x5080000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "mufu"), T("_5080_0"), ON(50, "sat"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08 ],
	[ 0x5000000000000000, 0xff80000000000000, OP8B, T("_pred"), N(  "vabsdiff4"), ON(38, "sd"), T("_5000_0"), T("_5000_1"), ON(50, "sat"), T("_5000_5"), T("_5000_2"), REG_00, T("_5000_3"), REG_08, T("_5000_4"), REG_20, REG_39 ],
	[ 0x4e00000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "xmad"), T("_5b00_0"), ON(55, "psl"), ON(56, "mrg"), T("_5100_0"), ON(54, "x"), ON(47, "cc"), REG_00, ON(53, "h1"), REG_08, ON(52, "h1"), C34_RZ_O14_20, REG_39 ],
	[ 0x4cf0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "r2p"), T("_5cf0_0"), T("_5cf0_1"), REG_08, C34_RZ_O14_20 ],
	[ 0x4ce8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "p2r"), T("_5cf0_1"), REG_00, T("_5cf0_0"), REG_08, C34_RZ_O14_20 ],
	[ 0x4ce0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "i2i"), T("_5ce0_0"), T("_5ce0_1"), ON(50, "sat"), ON(47, "cc"), REG_00, T("_5cf0_1"), ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4cc0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "iadd3"), ON(48, "x"), ON(47, "cc"), REG_00, ON(51, "neg"), REG_08, ON(50, "neg"), C34_RZ_O14_20, ON(49, "neg"), REG_39 ],
	[ 0x4cb8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "i2f"), T("_5cb8_0"), T("_5cb8_1"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"),  T("_5cf0_1"), C34_RZ_O14_20 ],
	[ 0x4cb0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "f2i"), ON(44, "ftz"), T("_5cb0_2"), T("_5cb0_0"), T("_5cb0_1"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4ca8000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "f2f"), ON(44, "ftz"), T("_5cb0_0"), T("_5cb8_0"), T("_5ca8_0"), ON(50, "sat"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4ca0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "sel"), REG_00, REG_08, C34_RZ_O14_20, T("_pred39") ],
	[ 0x4c98000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "mov"), REG_00, C34_RZ_O14_20, U04_39 ],
	[ 0x4c90000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "rro"), T("_5c90_0"), REG_00, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4c88000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fchk"), T("_5c88_0"), PRED03, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4c80000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "dmul"), T("_5cb8_2"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), C34_RZ_O14_20 ],
	[ 0x4c70000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "dadd"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4c68000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fmul"), T("_5c68_0"), T("_5c68_1"), T("_5cb8_2"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), C34_RZ_O14_20 ],
	[ 0x4c60000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "fmnmx"), ON(44, "ftz"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20, T("_pred39") ],
	[ 0x4c58000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "fadd"), ON(44, "ftz"), ON(50, "sat"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20 ],
	[ 0x4c50000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "dmnmx"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), C34_RZ_O14_20, T("_pred39") ],
	[ 0x4c48000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shl"), ON(39, "w"), ON(43, "x"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20 ],
	[ 0x4c40000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "lop"), T("_5c40_0"), ON(43, "x"), T("_5c40_1"), PRED48, ON(47, "cc"), REG_00, ON(39, "inv"), REG_08, ON(40, "inv"), C34_RZ_O14_20 ],
	[ 0x4c38000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "imul"), T("_5c38_0"), T("_5c38_1"), ON(39, "hi"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20 ],
	[ 0x4c30000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "flo"), T("_5c30_0"), ON(41, "sh"), ON(47, "cc"), REG_00, ON(40, "inv"), C34_RZ_O14_20 ],
	[ 0x4c28000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "shr"), T("_5c30_0"), ON(39, "w"), ON(44, "x"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20 ],
	[ 0x4c20000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(      "imnmx"), T("_5c30_0"), T("_5c20_0"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, T("_pred39") ],
	[ 0x4c18000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(     "iscadd"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), C34_RZ_O14_20, U05_39 ],
	[ 0x4c10000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "iadd"), ON(50, "sat"), ON(43, "x"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), C34_RZ_O14_20 ],
	[ 0x4c08000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(       "popc"), REG_00, ON(40, "inv"), C34_RZ_O14_20 ],
	[ 0x4c00000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bfe"), T("_5c30_0"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20 ],
	[ 0x4bf0000000000000, 0xfff8000000000000, OP8B, T("_pred"), N(        "bfi"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4bd0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(        "lea"), ON(46, "x"), PRED48, ON(47, "cc"), REG_00, ON(45, "neg"), REG_08, C34_RZ_O14_20, U05_39 ],
	[ 0x4bc0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "prmt"), T("_5bc0_0"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4bb0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "fsetp"), T("_5bb0_0"), ON(47, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), C34_RZ_O14_20, T("_pred39") ],
	[ 0x4ba0000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "fcmp"), T("_5bb0_0"), ON(47, "ftz"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4b80000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "dsetp"), T("_5bb0_0"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), C34_RZ_O14_20, T("_pred39") ],
	[ 0x4b70000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "dfma"), T("_5b70_0"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), C34_RZ_O14_20, ON(49, "neg"), REG_39 ],
	[ 0x4b60000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(      "isetp"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), PRED03, PRED00, REG_08, C34_RZ_O14_20, T("_pred39") ],
	[ 0x4b50000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "iset"), ON(44, "bf"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, T("_pred39") ],
	[ 0x4b40000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(       "icmp"), T("_5b60_0"), T("_5c30_0"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4a80000000000000, 0xff80000000000000, OP8B, T("_pred"), N(     "imadsp"), T("_5a80_0"), T("_5a80_1"), T("_5a80_2"),  ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4a00000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "imad"), T("_5a00_0"), T("_5a00_1"), ON(54, "hi"), ON(50, "sat"), ON(49, "x"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, REG_39 ],
	[ 0x4980000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "ffma"), T("_5980_0"), T("_5980_1"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), C34_RZ_O14_20, ON(49, "neg"), REG_39 ],
	[ 0x4900000000000000, 0xff80000000000000, OP8B, T("_pred"), N(       "dset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), C34_RZ_O14_20, T("_pred39")  ],
	[ 0x4800000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "fset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(55, "ftz"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), C34_RZ_O14_20, T("_pred39") ],
	[ 0x4000000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "vset"), T("_50f0_0"), T("_5700_1"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, T("_50f0_1"), REG_39 ],
	[ 0x3c00000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(       "lop3"), N("lut"), ON(47, "cc"), REG_00, REG_08, S20_20, U08_48 ],
	[ 0x3a00000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(      "vmnmx"), T("_5700_0"), T("_5700_1"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, T("_50f0_1"), REG_39 ],
	[ 0x38f8000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "shf"), N("r"), ON(50, "w"), T("_5cf8_1"), T("_5cf8_0"), ON(47, "cc"), REG_00, REG_08, U06_20, REG_39 ],
	[ 0x38f0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "r2p"), T("_5cf0_0"), T("_5cf0_1"), REG_08, S20_20 ],
	[ 0x38e8000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "p2r"), T("_5cf0_1"), REG_00, T("_5cf0_0"), REG_08, S20_20 ],
	[ 0x38e0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "i2i"), T("_5ce0_0"), T("_5ce0_1"), ON(50, "sat"), ON(47, "cc"), REG_00, T("_5cf0_1"), ON(45, "neg"), ON(49, "abs"), S20_20 ],
	[ 0x38c0000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(      "iadd3"), ON(48, "x"), ON(47, "cc"), REG_00, ON(51, "neg"), REG_08, ON(50, "neg"), S20_20, ON(49, "neg"), REG_39 ],
	[ 0x38b8000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "i2f"), T("_5cb8_0"), T("_5cb8_1"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"),  T("_5cf0_1"), S20_20 ],
	[ 0x38b0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "f2i"), ON(44, "ftz"), T("_5cb0_2"), T("_5cb0_0"), T("_5cb0_1"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), F20_20 ],
	[ 0x38a8000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "f2f"), ON(44, "ftz"), T("_5cb0_0"), T("_5cb8_0"), T("_5ca8_0"), ON(50, "sat"), ON(47, "cc"), REG_00, ON(45, "neg"), ON(49, "abs"), F20_20],
	[ 0x38a0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "sel"), REG_00, REG_08, S20_20, T("_pred39") ],
	[ 0x3898000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "mov"), REG_00, S20_20, U04_39 ],
	[ 0x3890000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "rro"), T("_5c90_0"), REG_00, ON(45, "neg"), ON(49, "abs"), F20_20 ],
	[ 0x3888000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "fchk"), T("_5c88_0"), PRED03, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), F20_20 ],
	[ 0x3880000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "dmul"), T("_5cb8_2"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), D20_20 ],
	[ 0x3870000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "dadd"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), D20_20 ],
	[ 0x3868000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "fmul"), T("_5c68_0"), T("_5c68_1"), T("_5cb8_2"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), F20_20 ],
	[ 0x3860000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(      "fmnmx"), ON(44, "ftz"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), F20_20, T("_pred39") ],
	[ 0x3858000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "fadd"), ON(44, "ftz"), ON(50, "sat"), T("_5cb8_2"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), F20_20 ],
	[ 0x3850000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(      "dmnmx"), ON(47, "cc"), REG_00, ON(48, "neg"), ON(46, "abs"), REG_08, ON(45, "neg"), ON(49, "abs"), D20_20, T("_pred39") ],
	[ 0x3848000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "shl"), ON(39, "w"), ON(43, "x"), ON(47, "cc"), REG_00, REG_08, S20_20 ],
	[ 0x3840000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "lop"), T("_5c40_0"), ON(43, "x"), T("_5c40_1"), PRED48, ON(47, "cc"), REG_00, ON(39, "inv"), REG_08, ON(40, "inv"), S20_20 ],
	[ 0x3838000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "imul"), T("_5c38_0"), T("_5c38_1"), ON(39, "hi"), ON(47, "cc"), REG_00, REG_08, S20_20 ],
	[ 0x3830000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "flo"), T("_5c30_0"), ON(41, "sh"), ON(47, "cc"), REG_00, ON(40, "inv"), S20_20 ],
	[ 0x3828000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "shr"), T("_5c30_0"), ON(39, "w"), ON(44, "x"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, S20_20 ],
	[ 0x3820000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(      "imnmx"), T("_5c30_0"), T("_5c20_0"), ON(47, "cc"), REG_00, REG_08, S20_20, T("_pred39") ],
	[ 0x3818000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(     "iscadd"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), S20_20, U05_39 ],
	[ 0x3810000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "iadd"), ON(50, "sat"), ON(43, "x"), ON(47, "cc"), REG_00, ON(49, "neg"), REG_08, ON(48, "neg"), S20_20 ],
	[ 0x3808000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(       "popc"), REG_00, ON(40, "inv"), S20_20 ],
	[ 0x3800000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "bfe"), T("_5c30_0"), ON(40, "brev"), ON(47, "cc"), REG_00, REG_08, S20_20 ],
	[ 0x36f8000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "shf"), N("l"), ON(50, "w"), T("_5cf8_1"), T("_5cf8_0"), ON(47, "cc"), REG_00, REG_08, S20_20, REG_39  ],
	[ 0x36f0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "bfi"), ON(47, "cc"), REG_00, REG_08, S20_20, REG_39 ],
	[ 0x36d0000000000000, 0xfef8000000000000, OP8B, T("_pred"), N(        "lea"), ON(46, "x"), PRED48, ON(47, "cc"), REG_00, ON(45, "neg"), REG_08, S20_20, U05_39 ],
	[ 0x36c0000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(       "prmt"), T("_5bc0_0"), REG_00, REG_08, S20_20, REG_39 ],
	[ 0x36b0000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(      "fsetp"), T("_5bb0_0"), ON(47, "ftz"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), F20_20, T("_pred39") ],
	[ 0x36a0000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(       "fcmp"), T("_5bb0_0"), ON(47, "ftz"), REG_00, REG_08, F20_20, REG_39 ],
	[ 0x3680000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(      "dsetp"), T("_5bb0_0"), T("_5bb0_1"), PRED03, PRED00, ON(43, "neg"), ON(7, "abs"), REG_08, ON(44, "abs"), D20_20, T("_pred39") ],
	[ 0x3670000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(       "dfma"), T("_5b70_0"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), D20_20, ON(49, "neg"), REG_39 ],
	[ 0x3660000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(      "isetp"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), PRED03, PRED00, REG_08, S20_20, T("_pred39") ],
	[ 0x3650000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(       "iset"), ON(44, "bf"), T("_5b60_0"), T("_5c30_0"), ON(43, "x"), T("_5bb0_1"), ON(47, "cc"), REG_00, REG_08, S20_20, T("_pred39") ],
	[ 0x3640000000000000, 0xfef0000000000000, OP8B, T("_pred"), N(       "icmp"), T("_5b60_0"), T("_5c30_0"), REG_00, REG_08, S20_20, REG_39 ],
	[ 0x3600000000000000, 0xfec0000000000000, OP8B, T("_pred"), N(       "xmad"), T("_5b00_0"), ON(36, "psl"), ON(37, "mrg"), T("_5b00_1"), ON(38, "x"), ON(47, "cc"), REG_00, ON(53, "h1"), REG_08, S20_20, REG_39  ],
	[ 0x3480000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(     "imadsp"), T("_5a80_0"), T("_5a80_1"), T("_5a80_2"),  ON(47, "cc"), REG_00, REG_08, S20_20, REG_39 ],
	[ 0x3400000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(       "imad"), T("_5a00_0"), T("_5a00_1"), ON(54, "hi"), ON(50, "sat"), ON(49, "x"), ON(47, "c"), REG_00, REG_08, S20_20, REG_39 ],
	[ 0x3280000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(       "ffma"), T("_5980_0"), T("_5980_1"), ON(50, "sat"), ON(47, "cc"), REG_00, REG_08, ON(48, "neg"), F20_20, ON(49, "neg"), REG_39 ],
	[ 0x3200000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(       "dset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), D20_20, T("_pred39")  ],
	[ 0x3000000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "fset"), ON(52, "bf"), T("_5bb0_0"), T("_5bb0_1"), ON(55, "ftz"), ON(47, "cc"), REG_00, ON(43, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(44, "abs"), F20_20, T("_pred39") ],
	[ 0x2c00000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(  "hadd2_32i"), ON(55, "ftz"), ON(52, "sat"), REG_00, ON(56, "neg"), T("_2c00_0"), REG_08, U16_36, U16_20],
	[ 0x2a00000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(  "hmul2_32i"), T("_2a00_0"), ON(52, "sat"), REG_00, T("_2c00_0"), REG_08, U16_36, U16_20],
	[ 0x2800000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(  "hfma2_32i"), T("_2a00_0"), REG_00, T("_2c00_0"), REG_08, U16_36, U16_20, ON(52, "neg"), REG_00],
	[ 0x2000000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(       "vadd"), T("_5700_0"), T("_5700_1"), T("_5700_3"), ON(47, "cc"), REG_00, T("_5f00_3"), REG_08, T("_50f0_1"), REG_39 ],
	[ 0x1f00000000000000, 0xff00000000000000, OP8B, T("_pred"), N(    "imul32i"), T("_1f00_0"), T("_1f00_1"), ON(53, "hi"), ON(52, "cc"), REG_00, REG_08, S32_20 ],
	[ 0x1e00000000000000, 0xff00000000000000, OP8B, T("_pred"), N(    "fmul32i"), T("_5980_0"), ON(55, "sat"), ON(52, "cc"), REG_00, REG_08, F32_20 ],
	[ 0x1d80000000000000, 0xff80000000000000, OP8B, T("_pred"), N(    "iadd32i"), N("po"), ON(54, "sat"), ON(53, "x"), ON(52, "cc"), REG_00, REG_08, S32_20 ],
	[ 0x1c00000000000000, 0xfe80000000000000, OP8B, T("_pred"), N(    "iadd32i"), ON(54, "sat"), ON(53, "x"), ON(52, "cc"), REG_00, ON(56, "neg"), REG_08, S32_20 ],
	[ 0x1800000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(        "lea"), N("hi"), ON(57, "x"), PRED48, ON(47, "cc"), REG_00, ON(56, "neg"), REG_08, C34_RZ_O14_20, REG_39, U05_51 ],
	[ 0x1400000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(  "iscadd32i"), ON(52, "cc"), REG_00, REG_08, S32_20, U05_53 ],
	[ 0x1000000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(    "imad32i"), T("_1f00_0"), T("_1000_0"), ON(53, "hi"), ON(52, "cc"), REG_00, ON(56, "neg"), REG_08, S32_20, ON(55, "neg"), REG_00 ],
	[ 0x0c00000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(    "ffma32i"), T("_5980_0"), ON(55, "sat"), ON(52, "cc"), REG_00, ON(56, "neg"), REG_08, F32_20, ON(57, "neg"), REG_00 ],
	[ 0x0800000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(    "fadd32i"), ON(55, "ftz"), ON(52, "cc"), REG_00, ON(56, "neg"), ON(54, "abs"), REG_08, ON(53, "neg"), ON(57, "abs"), F32_20 ],
	[ 0x0400000000000000, 0xfc00000000000000, OP8B, T("_pred"), N(     "lop32i"), T("_0400_0"), ON(57, "x"), ON(52, "cc"), REG_00, ON(55, "inv"), REG_08, ON(56, "inv"), U32_20 ],
	[ 0x0200000000000000, 0xfe00000000000000, OP8B, T("_pred"), N(       "lop3"), N("lut"), ON(56, "x"), ON(47, "cc"), REG_00, REG_08, C34_RZ_O14_20, REG_39, U08_48 ],
	[ 0x0100000000000000, 0xfff0000000000000, OP8B, T("_pred"), N(     "mov32i"), REG_00, U32_20, U04_12 ],
]

def build_instruction_mask(base, mask):
	n_mask = 0x8000000000000000
	output = ''
	for _ in xrange(16):
		a = 1 if (base & n_mask) != 0 else 0
		b = True if (mask & n_mask) != 0 else False
		#print a, b
		if b:
			output += '%d' % a
		else:
			output += '-'
		n_mask >>= 1
	return output

def Get64BitsStr(base, mask, IsOp=False, iden='x', IsNotSpecial=False):
	n_mask = (1 << 63)
	output = ''
	for i in xrange(64):
		if i != 0 and i % 4 == 0:
			output += ' '
		if mask & n_mask:
			if IsOp:
				if IsNotSpecial:
					output += Fore.LIGHTGREEN_EX + '%d' % ((base & n_mask) >> (63 - i))
				else:
					output += Fore.LIGHTCYAN_EX + '%d' % ((base & n_mask) >> (63 - i))
			else:
				output += Fore.LIGHTWHITE_EX + '%s' % iden
		else:
			output += Fore.LIGHTYELLOW_EX + '-'
		n_mask >>= 1
	output += Fore.RESET
	return output
#print build_instruction_mask(0x3600000000000000, 0xfec0000000000000)

def BuildInstructionTable():
	#i = 0
	for instruction in instruction_table:
		ins_idx = 3
		if instruction[ins_idx] == '$T__pred':
			ins_idx += 1
		#if instruction[ins_idx].strip() == 'kil':
		ins_name = instruction[ins_idx].strip().upper()
		base = instruction[0]
		mask = instruction[1]

		print 'INST("%s", Id::%s, Type::Unknown, "%s"),' % (build_instruction_mask(base, mask), ins_name, ins_name)
			#print binary_str
		#print 'INST("'
#BuildInstructionTable()

def ParseConst(ins):
	if ins == 'C34_RZ_O14_20':
		a = 0x1f << 34
		b = 0x3fff << 20
		return a | b
	elif ins == 'C36_RZ_S16_20':
		a = 0x1f << 36
		b = 0xffff << 20
		return a | b
	elif ins == 'C36_08_S16_20':
		a = 0x1f << 36
		b = 0xff << 8
		c = 0xffff << 20
		return a | b | c
	else:
		print 'Unhandled!', ins
		return None
def GetLongestLength(instruction, ins_idx):
	longest = 0
	for i in xrange(ins_idx + 1, len(instruction)):
		elem = instruction[i]
		if elem[0] == '$':
			if elem[1] == 'T':
				if len(elem[4:]) > longest:
					longest = len(elem[4:])
			elif elem[1:3] == 'ON' or elem[1:3] == 'ZN':
				if len(elem[7:]) > longest:
					longest = len(elem[7:])
			else:
				print 'UNHANDLED! %s' % elem
		else:
			if len(elem) > longest:
				longest = len(elem)
	return longest

def PadToLongest(op, longest):
	sys.stdout.write(' ' * (longest - len(op)))
	sys.stdout.write(op)
			
def PrettyPrint(n, IsTest=False, FillTable=False):
	for instruction in instruction_table:
		ins_idx = 3
		if instruction[ins_idx] == '$T__pred':
			ins_idx += 1
		#if instruction[ins_idx].strip() == 'kil':
		ins_name = instruction[ins_idx].strip().upper()
		base = instruction[0]
		mask = instruction[1]
		if n & mask == base or IsTest:
			print ''
			print ins_name
			longest = GetLongestLength(instruction, ins_idx)
			sys.stdout.write(' ' * (longest+1))
			sys.stdout.write(Fore.LIGHTGREEN_EX)
			for i in xrange(16):
				sys.stdout.write('   ')
				if i > 12:
					sys.stdout.write(' ')
				sys.stdout.write('%d'% (60 - (4*i)))
			print Fore.RESET
			PadToLongest('opcode', longest)
			print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(base, mask, True, IsNotSpecial=True)
			for i in xrange(ins_idx + 1, len(instruction)):
				elem = instruction[i]
				if elem[0] == '$':
					if elem[1] == 'T':
						t = ParserT(elem)
						PadToLongest(elem[4:], longest)
						if FillTable:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, t[0][1], True)
						else:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(t[0][0], t[0][1])
					elif elem[1:3] == 'ON':
						bit, name = ParseON(elem)
						n_bit = 1 << bit
						PadToLongest(name, longest)
						if FillTable:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
						else:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
					elif elem[1:3] == 'ZN':
						bit, name = ParseON(elem)
						n_bit = 1 << bit
						PadToLongest(name, longest)
						if FillTable:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
						else:
							print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
					else:
						print 'UNPROCESSED', elem
				elif elem[:3] == 'REG' or elem[:3] == 'SYS':
					reg_start_bit = ParseREG(elem)
					n_bit = 0xff << reg_start_bit
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif (elem[0] == 'U' or elem[0] == 'S' or elem[0] == 'F' or elem[0] == 'D') and elem[1].isdigit():
					n_bit = ParseImmediate(elem)
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem[:4] == 'PRED':
					bit = ParsePred(elem)
					mask = build_mask(3)
					n_bit = mask << bit
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem[0] == 'C' and elem[1].isdigit():
					n_bit = ParseConst(elem)
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'AMEM':
					a = 0xff << 8
					b = build_mask(10) << 20
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'PLDMEM':
					a = 0xff << 8
					b = build_mask(8) << 20
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'ISBERDMEM' or elem == 'SUREDMEM' or elem == 'AMEMIDX':
					n_bit = 0xff << 8
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'CCTLLMEM':
					a = 0xff << 8
					b = build_mask(22) << 22
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'CCTLMEM':
					a = 0xff << 8
					b = build_mask(30) << 22
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'SMEM' or elem == 'LMEM' or elem == 'NCGMEM':
					a = 0xff << 8
					b = build_mask(24) << 20
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'cas' or elem == 'd' or elem=='idx' or elem == 'b' or elem == 'lod' or elem=='0x0' or elem == 'r' or elem == 'l' or elem == 'lut' or elem == 'hi' or elem == 'vtg' or elem == 'cc' or elem == 'po':
					elem = '?' * len(elem)
					PadToLongest(elem, longest)
					print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(0x0, 0x0)
				elif elem == 'ATOMMEM0' or elem == 'REDMEM0':
					a = 0xff << 8
					b = build_mask(20) << 28
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'ATOMMEM1':
					a = 0xff << 8
					b = build_mask(32) << 30
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'BTARG':
					n_bit = build_mask(24) << 20
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'AMEM28':
					a = 0xff << 8
					b = build_mask(10) << 28
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				elif elem == 'GMEM':
					a = 0xff << 8
					b = build_mask(32) << 20
					n_bit = a | b
					PadToLongest(elem, longest)
					if FillTable:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n, n_bit, True)
					else:
						print Fore.LIGHTYELLOW_EX + ': ' + Get64BitsStr(n_bit, n_bit)
				else:
					raise Exception('Unprocessed element %s' % elem)
		if IsTest:
			print ''

def PrettyPrintIns(ins):
	for instruction in instruction_table:
		ins_idx = 3
		if instruction[ins_idx] == '$T__pred':
			ins_idx += 1
		#if instruction[ins_idx].strip() == 'kil':
		ins_name = instruction[ins_idx].strip().lower()
		base = instruction[0]
		mask = instruction[1]
		if ins == ins_name:
			PrettyPrint(base & mask)
			break

def main(argc, argv):
	if argc == 2 and argv[1].lower() == '-test':
		PrettyPrint(0, True)
		return
	if argc > 2 and argv[1].lower() == '-ins':
		for j in xrange(2, argc):
			PrettyPrintIns(argv[j].lower())
		return
	if argc > 2 and argv[1].lower() == '-f':
		for j in xrange(2, argc):
			n = argv[j]
			if n[:2] == '0x':
				n = int(n[2:], 16)
			else:
				n = int(n)
			PrettyPrint(n, FillTable=True)
		return
	for j in xrange(1, argc):
		n = argv[j]
		if n[:2] == '0x':
			n = int(n[2:], 16)
		else:
			n = int(n)
		PrettyPrint(n)

if __name__ == "__main__":
	main(len(sys.argv), sys.argv)
